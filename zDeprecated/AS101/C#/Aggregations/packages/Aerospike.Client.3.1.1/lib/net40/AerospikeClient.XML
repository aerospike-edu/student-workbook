<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AerospikeClient</name>
    </assembly>
    <members>
        <member name="T:Aerospike.Client.Unpacker">
            <summary>
            De-serialize collection objects using MessagePack format specification:
            
            https://github.com/msgpack/msgpack/blob/master/spec.md
            </summary>
        </member>
        <member name="M:Aerospike.Client.Command.WriteHeader(Aerospike.Client.WritePolicy,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Header write for write operations.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Command.WriteHeader(Aerospike.Client.Policy,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generic header write.
            </summary>
        </member>
        <member name="T:Aerospike.Client.IndexTask">
            <summary>
            Task used to poll for long running create index completion.
            </summary>
        </member>
        <member name="T:Aerospike.Client.BaseTask">
            <summary>
            Task used to poll for server task completion.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BaseTask.#ctor(Aerospike.Client.Cluster,System.Boolean)">
            <summary>
            Initialize task with fields needed to query server nodes.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BaseTask.Wait">
            <summary>
            Wait for asynchronous task to complete using default sleep interval.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BaseTask.Wait(System.Int32)">
            <summary>
            Wait for asynchronous task to complete using given sleep interval.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BaseTask.IsDone">
            <summary>
            Has task completed.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BaseTask.QueryIfDone">
            <summary>
            Query all nodes for task completion status.
            </summary>
        </member>
        <member name="M:Aerospike.Client.IndexTask.#ctor(Aerospike.Client.Cluster,System.String,System.String)">
            <summary>
            Initialize task with fields needed to query server nodes.
            </summary>
        </member>
        <member name="M:Aerospike.Client.IndexTask.#ctor">
            <summary>
            Initialize task with fields needed to query server nodes.
            </summary>
        </member>
        <member name="M:Aerospike.Client.IndexTask.QueryIfDone">
            <summary>
            Query all nodes for task completion status.
            </summary>
        </member>
        <member name="T:Aerospike.Client.BatchPolicy">
            <summary>
            Configuration variables for multi-record get and exist requests.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Policy">
            <summary>
            Container object for transaction policy attributes used in all database
            operation calls.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Policy.priority">
            <summary>
            Priority of request relative to other transactions.
            Currently, only used for scans.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Policy.consistencyLevel">
            <summary>
            How replicas should be consulted in a read operation to provide the desired
            consistency guarantee. Default to allowing one replica to be used in the
            read operation.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Policy.timeout">
            <summary>
            Total transaction timeout in milliseconds for both client and server.
            The timeout is tracked on the client and also sent to the server along 
            with the transaction in the wire protocol.  The client will most likely
            timeout first, but the server has the capability to timeout the transaction
            as well.
            <para>
            The timeout is also used as a socket timeout.  Retries will not occur
            if the timeout limit has been reached.
            Default to no timeout (0).
            </para>
            </summary>
        </member>
        <member name="F:Aerospike.Client.Policy.maxRetries">
            <summary>
            Maximum number of retries before aborting the current transaction.
            A retry is attempted when there is a network error other than timeout.  
            If maxRetries is exceeded, the abort will occur even if the timeout 
            has not yet been exceeded. The default number of retries is 1.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Policy.sleepBetweenRetries">
            <summary>
            Milliseconds to sleep between retries if a transaction fails and the 
            timeout was not exceeded. The default sleep between retries is 500 ms.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Policy.allowProleReads">
            <summary>
            Allow read operations to use replicated data partitions instead of master
            partition. By default, both read and write operations are directed to the
            master partition.
            <para>
            This variable is currently only used in batch read/exists operations. For 
            batch, this variable should only be set to true when the replication factor
            is greater than or equal to the number of nodes in the cluster.
            </para>
            </summary>
        </member>
        <member name="F:Aerospike.Client.Policy.sendKey">
            <summary>
            Send user defined key in addition to hash digest on both reads and writes.
            The default is to not send the user defined key.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Policy.#ctor(Aerospike.Client.Policy)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Policy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Aerospike.Client.BatchPolicy.maxConcurrentThreads">
            <summary>
            Maximum number of concurrent batch request threads to server nodes at any point in time.
            If there are 16 node/namespace combinations requested and maxConcurrentThreads is 8, 
            then batch requests will be made for 8 node/namespace combinations in parallel threads.
            When a request completes, a new request will be issued until all 16 threads are complete.
            <para>
            Values:
            <list type="bullet">
            <item>
            1: Issue batch requests sequentially.  This mode has a performance advantage for small
            to medium sized batch sizes because requests can be issued in the main transaction thread.
            This is the default.
            </item>
            <item>
            0: Issue all batch requests in parallel threads.  This mode has a performance
            advantage for extremely large batch sizes because each node can process the request
            immediately.  The downside is extra threads will need to be created (or taken from
            a thread pool).
            </item>
            <item>
            > 0: Issue up to maxConcurrentThreads batch requests in parallel threads.  When a request
            completes, a new request will be issued until all threads are complete.  This mode
            prevents too many parallel threads being created for large cluster implementations.
            The downside is extra threads will still need to be created (or taken from a thread pool).
            </item>
            </list>
            </para>
            </summary>		
        </member>
        <member name="M:Aerospike.Client.BatchPolicy.#ctor(Aerospike.Client.BatchPolicy)">
            <summary>
            Copy batch policy from another batch policy.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BatchPolicy.#ctor(Aerospike.Client.Policy)">
            <summary>
            Copy batch policy from another policy.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BatchPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Aerospike.Client.RecordListener">
            <summary>
            Asynchronous result notifications for get or operate commands.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordListener.OnSuccess(Aerospike.Client.Key,Aerospike.Client.Record)">
            <summary>
            This method is called when an asynchronous get or operate command completes successfully.
            </summary>
            <param name="key">unique record identifier</param>
            <param name="record">record instance if found, otherwise null</param>
        </member>
        <member name="M:Aerospike.Client.RecordListener.OnFailure(Aerospike.Client.AerospikeException)">
            <summary>
            This method is called when an asynchronous get or operate command fails.
            </summary>
            <param name="exception">error that occurred</param>
        </member>
        <member name="T:Aerospike.Client.AsyncCommand">
            <summary>
            Asynchronous command handler.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AsyncCommand.CheckTimeout">
            <summary>
            Check for timeout from timeout queue thread.
            </summary>
        </member>
        <member name="T:Aerospike.Client.GenerationPolicy">
            <summary>
            How to handle record writes based on record generation.
            </summary>
        </member>
        <member name="F:Aerospike.Client.GenerationPolicy.NONE">
            <summary>
            Do not use record generation to restrict writes. 
            </summary>
        </member>
        <member name="F:Aerospike.Client.GenerationPolicy.EXPECT_GEN_EQUAL">
            <summary>
            Update/delete record if expected generation is equal to server generation. Otherwise, fail. 
            </summary>
        </member>
        <member name="F:Aerospike.Client.GenerationPolicy.EXPECT_GEN_GT">
            <summary>
            Update/delete record if expected generation greater than the server generation. Otherwise, fail.
            This is useful for restore after backup. 
            </summary>
        </member>
        <member name="T:Aerospike.Client.DeleteListener">
            <summary>
            Asynchronous result notifications for delete commands.
            </summary>
        </member>
        <member name="M:Aerospike.Client.DeleteListener.OnSuccess(Aerospike.Client.Key,System.Boolean)">
            <summary>
            This method is called when an asynchronous delete command completes successfully.
            </summary>
            <param name="key">unique record identifier</param>
            <param name="existed">whether record existed on server before deletion</param>
        </member>
        <member name="M:Aerospike.Client.DeleteListener.OnFailure(Aerospike.Client.AerospikeException)">
            <summary>
            This method is called when an asynchronous delete command fails.
            </summary>
            <param name="exception">error that occurred</param>
        </member>
        <member name="T:Aerospike.Client.WritePolicy">
            <summary>
            Container object for policy attributes used in write operations.
            This object is passed into methods where database writes can occur.
            </summary>
        </member>
        <member name="F:Aerospike.Client.WritePolicy.recordExistsAction">
            <summary>
            Qualify how to handle writes where the record already exists.
            </summary>
        </member>
        <member name="F:Aerospike.Client.WritePolicy.generationPolicy">
            <summary>
            Qualify how to handle record writes based on record generation. The default (NONE)
            indicates that the generation is not used to restrict writes.
            </summary>
        </member>
        <member name="F:Aerospike.Client.WritePolicy.commitLevel">
            <summary>
            Desired consistency guarantee when committing a transaction on the server. The default 
            (COMMIT_ALL) indicates that the server should wait for master and all replica commits to 
            be successful before returning success to the client.
            </summary>
        </member>
        <member name="F:Aerospike.Client.WritePolicy.generation">
            <summary>
            Expected generation. Generation is the number of times a record has been modified
            (including creation) on the server. If a write operation is creating a record, 
            the expected generation would be 0.  
            </summary>
        </member>
        <member name="F:Aerospike.Client.WritePolicy.expiration">
            <summary>
            Record expiration.  Also known as ttl (time to live). 
            Seconds record will live before being removed by the server.
            <para>
            Expiration values:
            <list type="bullet">
            <item>-1: Never expire for Aerospike 2 server versions >= 2.7.2 and Aerospike 3 server
            versions >= 3.1.4.  Do not use -1 for older servers.</item>
            <item>0:  Default to namespace's "default-ttl" on the server.</item>
            <item>> 0: Actual expiration in seconds.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Aerospike.Client.WritePolicy.#ctor(Aerospike.Client.WritePolicy)">
            <summary>
            Copy write policy from another write policy.
            </summary>
        </member>
        <member name="M:Aerospike.Client.WritePolicy.#ctor(Aerospike.Client.Policy)">
            <summary>
            Copy write policy from another policy.
            </summary>
        </member>
        <member name="M:Aerospike.Client.WritePolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Operation">
            <summary>
            Database operation definition.  The class is used in client's operate() method. 
            </summary>
        </member>
        <member name="M:Aerospike.Client.Operation.Get(System.String)">
            <summary>
            Create read bin database operation.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Operation.Get">
            <summary>
            Create read all record bins database operation.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Operation.GetHeader">
            <summary>
            Create read record header database operation.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Operation.Put(Aerospike.Client.Bin)">
            <summary>
            Create set database operation.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Operation.Append(Aerospike.Client.Bin)">
            <summary>
            Create string append database operation.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Operation.Prepend(Aerospike.Client.Bin)">
            <summary>
            Create string prepend database operation.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Operation.Add(Aerospike.Client.Bin)">
            <summary>
            Create integer add database operation.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Operation.Touch">
            <summary>
            Create touch database operation.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Operation.type">
            <summary>
            Type of operation.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Operation.binName">
            <summary>
            Optional bin name used in operation.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Operation.binValue">
            <summary>
            Optional bin value used in operation.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Host">
            <summary>
            Host name/port of database server. 
            </summary>
        </member>
        <member name="F:Aerospike.Client.Host.name">
            <summary>
            Host name or IP address of database server.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Host.port">
            <summary>
            Port of database server.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Host.#ctor(System.String,System.Int32)">
            <summary>
            Initialize host.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Host.ToString">
            <summary>
            Convert host name and port to string.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Host.GetHashCode">
            <summary>
            Return host address hash code.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Host.Equals(System.Object)">
            <summary>
            Return if hosts are equal.
            </summary>
        </member>
        <member name="T:Aerospike.Client.User">
            <summary>
            User and assigned roles.
            </summary>
        </member>
        <member name="F:Aerospike.Client.User.name">
            <summary>
            User name.
            </summary>
        </member>
        <member name="F:Aerospike.Client.User.roles">
            <summary>
            List of assigned roles.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Cluster.WaitTillStabilized(System.Boolean)">
            <summary>
            Tend the cluster until it has stabilized and return control.
            This helps avoid initial database request timeout issues when
            a large number of threads are initiated at client startup.
            
            If the cluster has not stabilized by the timeout, return
            control as well.  Do not return an error since future 
            database requests may still succeed.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Cluster.Tend(System.Boolean)">
            <summary>
            Check health of all nodes in the cluster.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Cluster.AddNodesCopy(System.Collections.Generic.List{Aerospike.Client.Node})">
            <summary>
            Add nodes using copy on write semantics.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Cluster.RemoveNodesCopy(System.Collections.Generic.List{Aerospike.Client.Node})">
            <summary>
            Remove nodes using copy on write semantics.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Hash">
            <summary>
            This class contains the algorithm used to create hash digests from user keys.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Hash.Algorithm">
            <summary>
            Get an instance of the hash algorithm, one instance per thread.
            </summary>
        </member>
        <member name="T:Aerospike.Client.RecordArrayListener">
            <summary>
            Asynchronous result notifications for batch get commands.
            The result is sent in a single array.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordArrayListener.OnSuccess(Aerospike.Client.Key[],Aerospike.Client.Record[])">
            <summary>
            This method is called when an asynchronous batch get command completes successfully.
            The returned record array is in positional order with the original key array order.
            </summary>
            <param name="keys">unique record identifiers</param>
            <param name="records">record instances, an instance will be null if the key is not found</param>
        </member>
        <member name="M:Aerospike.Client.RecordArrayListener.OnFailure(Aerospike.Client.AerospikeException)">
            <summary>
            This method is called when an asynchronous batch get command fails.
            </summary>
            <param name="exception">error that occurred</param>
        </member>
        <member name="T:Aerospike.Client.Connection">
            <summary>
            Socket connection wrapper.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Connection.#ctor(System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            Create socket with connection timeout.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Connection.IsValid">
            <summary>
            Is socket connected and used within specified limits.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Connection.Close">
            <summary>
            Shutdown and close socket.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Connection.GetHostAddresses(System.String,System.Int32)">
            <summary>
            GetHostAddresses with timeout.
            </summary>
            <param name="host">Host name.</param>
            <param name="timeoutMillis">Timeout in milliseconds</param>
        </member>
        <member name="T:Aerospike.Client.IndexType">
            <summary>
            Underlying data type of secondary index.
            </summary>
        </member>
        <member name="F:Aerospike.Client.IndexType.NUMERIC">
            <summary>
            Number index.
            </summary>
        </member>
        <member name="F:Aerospike.Client.IndexType.STRING">
            <summary>
            String index.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Filter">
            <summary>
            Query filter used to narrow down query results.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Filter.Equal(System.String,System.Int64)">
            <summary>
            Create long equality filter for query.
            </summary>
            <param name="name">bin name</param>
            <param name="value">filter value</param>
        </member>
        <member name="M:Aerospike.Client.Filter.Equal(System.String,System.String)">
            <summary>
            Create string equality filter for query.
            </summary>
            <param name="name">bin name</param>
            <param name="value">filter value</param>
        </member>
        <member name="M:Aerospike.Client.Filter.Contains(System.String,Aerospike.Client.IndexCollectionType,System.Int64)">
            <summary>
            Create contains number filter for query on collection index.
            </summary>
            <param name="name">bin name</param>
            <param name="type">index collection type</param>
            <param name="value">filter value</param>
        </member>
        <member name="M:Aerospike.Client.Filter.Contains(System.String,Aerospike.Client.IndexCollectionType,System.String)">
            <summary>
            Create contains string filter for query on collection index.
            </summary>
            <param name="name">bin name</param>
            <param name="type">index collection type</param>
            <param name="value">filter value</param>
        </member>
        <member name="M:Aerospike.Client.Filter.Range(System.String,System.Int64,System.Int64)">
            <summary>
            Create range filter for query.
            Range arguments must be longs or integers which can be cast to longs.
            String ranges are not supported.
            </summary>
            <param name="name">bin name</param>
            <param name="begin">filter begin value</param>
            <param name="end">filter end value</param>
        </member>
        <member name="M:Aerospike.Client.Filter.Range(System.String,Aerospike.Client.IndexCollectionType,System.Int64,System.Int64)">
            <summary>
            Create range filter for query on collection index.
            Range arguments must be longs or integers which can be cast to longs.
            String ranges are not supported.
            </summary>
            <param name="name">bin name</param>
            <param name="type">index collection type</param>
            <param name="begin">filter begin value</param>
            <param name="end">filter end value</param>
        </member>
        <member name="T:Aerospike.Client.IndexCollectionType">
            <summary>
            Secondary index collection type.
            </summary>
        </member>
        <member name="F:Aerospike.Client.IndexCollectionType.DEFAULT">
            <summary>
            Normal scalar index.
            </summary>
        </member>
        <member name="F:Aerospike.Client.IndexCollectionType.LIST">
            <summary>
            Index list elements.
            </summary>
        </member>
        <member name="F:Aerospike.Client.IndexCollectionType.MAPKEYS">
            <summary>
            Index map keys.
            </summary>
        </member>
        <member name="F:Aerospike.Client.IndexCollectionType.MAPVALUES">
            <summary>
            Index map values.
            </summary>
        </member>
        <member name="T:Aerospike.Client.ScanPolicy">
            <summary>
            Container object for optional parameters used in scan operations.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ScanPolicy.scanPercent">
            <summary>
            Percent of data to scan.  Valid integer range is 1 to 100.
            Default is 100.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ScanPolicy.maxConcurrentNodes">
            <summary>
            Maximum number of concurrent requests to server nodes at any point in time.
            If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests
            will be made to 8 nodes in parallel.  When a scan completes, a new scan request will 
            be issued until all 16 nodes have been scanned.
            <para>
            This field is only relevant when concurrentNodes is true.
            Default (0) is to issue requests to all server nodes in parallel.
            </para>
            </summary>
        </member>
        <member name="F:Aerospike.Client.ScanPolicy.concurrentNodes">
            <summary>
            Issue scan requests in parallel or serially. 
            </summary>
        </member>
        <member name="F:Aerospike.Client.ScanPolicy.includeBinData">
            <summary>
            Indicates if bin data is retrieved. If false, only record digests are retrieved.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ScanPolicy.failOnClusterChange">
            <summary>
            Terminate scan if cluster in fluctuating state.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ScanPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Aerospike.Client.QueryPolicy">
            <summary>
            Container object for policy attributes used in query operations.
            </summary>
        </member>
        <member name="F:Aerospike.Client.QueryPolicy.maxConcurrentNodes">
            <summary>
            Maximum number of concurrent requests to server nodes at any point in time.
            If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then queries 
            will be made to 8 nodes in parallel.  When a query completes, a new query will 
            be issued until all 16 nodes have been queried.
            Default (0) is to issue requests to all server nodes in parallel.
            </summary>
        </member>
        <member name="F:Aerospike.Client.QueryPolicy.recordQueueSize">
            <summary>
            Number of records to place in queue before blocking.
            Records received from multiple server nodes will be placed in a queue.
            A separate thread consumes these records in parallel.
            If the queue is full, the producer threads will block until records are consumed.
            </summary>
        </member>
        <member name="M:Aerospike.Client.QueryPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Aerospike.Client.RecordSequenceListener">
            <summary>
            Asynchronous result notifications for batch get and scan commands.
            The results are sent one record at a time.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordSequenceListener.OnRecord(Aerospike.Client.Key,Aerospike.Client.Record)">
            <summary>
            This method is called when an asynchronous record is received from the server.
            The receive sequence is not ordered.
            <para>
            The user may throw a 
            <seealso cref="T:Aerospike.Client.AerospikeException.QueryTerminated"/> 
            exception if the command should be aborted.  If any exception is thrown, parallel command threads
            to other nodes will also be terminated and the exception will be propagated back through the
            commandFailed() call.
            </para>
            </summary>
            <param name="key">unique record identifier </param>
            <param name="record">record instance, will be null if the key is not found</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if error occurs or scan should be terminated.</exception>
        </member>
        <member name="M:Aerospike.Client.RecordSequenceListener.OnSuccess">
            <summary>
            This method is called when the asynchronous batch get or scan command completes.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordSequenceListener.OnFailure(Aerospike.Client.AerospikeException)">
            <summary>
            This method is called when an asynchronous batch get or scan command fails.
            </summary>
            <param name="exception">error that occurred</param>
        </member>
        <member name="T:Aerospike.Client.ExistsListener">
            <summary>
            Asynchronous result notifications for exists commands.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ExistsListener.OnSuccess(Aerospike.Client.Key,System.Boolean)">
            <summary>
            This method is called when an asynchronous exists command completes successfully.
            </summary>
            <param name="key">unique record identifier</param>
            <param name="exists">whether key exists on server</param>
        </member>
        <member name="M:Aerospike.Client.ExistsListener.OnFailure(Aerospike.Client.AerospikeException)">
            <summary>
            This method is called when an asynchronous exists command fails.
            </summary>
            <param name="exception">error that occurred</param>
        </member>
        <member name="T:Aerospike.Client.ExistsArrayListener">
            <summary>
            Asynchronous result notifications for batch exists commands.
            The result is sent in a single array.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ExistsArrayListener.OnSuccess(Aerospike.Client.Key[],System.Boolean[])">
            <summary>
            This method is called when an asynchronous batch exists command completes successfully.
            The returned boolean array is in positional order with the original key array order.
            </summary>
            <param name="keys">unique record identifiers</param>
            <param name="exists">whether keys exists on server</param>
        </member>
        <member name="M:Aerospike.Client.ExistsArrayListener.OnFailure(Aerospike.Client.AerospikeException)">
            <summary>
            This method is called when an asynchronous exists command fails.
            </summary>
            <param name="exception">error that occurred</param>
        </member>
        <member name="T:Aerospike.Client.MaxCommandAction">
            <summary>
            How to handle cases when the asynchronous maximum number of concurrent database commands have been exceeded.
            </summary>
        </member>
        <member name="F:Aerospike.Client.MaxCommandAction.REJECT">
            <summary>
            Reject database command.
            </summary>
        </member>
        <member name="F:Aerospike.Client.MaxCommandAction.BLOCK">
            <summary>
            Block until a previous command completes. 
            </summary>
        </member>
        <member name="T:Aerospike.Client.AsyncClient">
            <summary>
            Asynchronous Aerospike client.
            <para>
            Your application uses this class to perform asynchronous database operations 
            such as writing and reading records, and selecting sets of records. Write 
            operations include specialized functionality such as append/prepend and arithmetic
            addition.
            </para>
            <para>
            This client is thread-safe. One client instance should be used per cluster.
            Multiple threads should share this cluster instance.
            </para>
            <para>
            Each record may have multiple bins, unless the Aerospike server nodes are
            configured as "single-bin". In "multi-bin" mode, partial records may be
            written or read by specifying the relevant subset of bins.
            </para>
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeClient">
            <summary>
            Instantiate an AerospikeClient object to access an Aerospike
            database cluster and perform database operations.
            <para>
            This client is thread-safe. One client instance should be used per cluster.
            Multiple threads should share this cluster instance.
            </para>
            <para>
            Your application uses this class API to perform database operations such as
            writing and reading records, and selecting sets of records. Write operations
            include specialized functionality such as append/prepend and arithmetic
            addition.
            </para>
            <para>
            Each record may have multiple bins, unless the Aerospike server nodes are
            configured as "single-bin". In "multi-bin" mode, partial records may be
            written or read by specifying the relevant subset of bins.
            </para>
            </summary>
        </member>
        <member name="F:Aerospike.Client.AerospikeClient.readPolicyDefault">
            <summary>
            Default read policy that is used when read command policy is null.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AerospikeClient.writePolicyDefault">
            <summary>
            Default write policy that is used when write command policy is null.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AerospikeClient.scanPolicyDefault">
            <summary>
            Default scan policy that is used when scan command policy is null.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AerospikeClient.queryPolicyDefault">
            <summary>
            Default query policy that is used when query command policy is null.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AerospikeClient.batchPolicyDefault">
            <summary>
            Default batch policy that is used when batch command policy is null.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.#ctor(System.String,System.Int32)">
            <summary>
            Initialize Aerospike client.
            If the host connection succeeds, the client will:
            <list type="bullet">
            <item>Add host to the cluster map</item>
            <item>Request host's list of other nodes in cluster</item>
            <item>Add these nodes to cluster map</item>
            </list>
            <para>
            If the connection succeeds, the client is ready to process database requests.
            If the connection fails, the cluster will remain in a disconnected state
            until the server is activated.
            </para>
            </summary>
            <param name="hostname">host name</param>
            <param name="port">host port</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if host connection fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.#ctor(Aerospike.Client.ClientPolicy,System.String,System.Int32)">
            <summary>
            Initialize Aerospike client.
            The client policy is used to set defaults and size internal data structures.
            If the host connection succeeds, the client will:
            <list type="bullet">
            <item>Add host to the cluster map</item>
            <item>Request host's list of other nodes in cluster</item>
            <item>Add these nodes to cluster map</item>
            </list>
            <para>
            If the connection succeeds, the client is ready to process database requests.
            If the connection fails and the policy's failOnInvalidHosts is true, a connection 
            exception will be thrown. Otherwise, the cluster will remain in a disconnected state
            until the server is activated.
            </para>
            </summary>
            <param name="policy">client configuration parameters, pass in null for defaults</param>
            <param name="hostname">host name</param>
            <param name="port">host port</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if host connection fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.#ctor(Aerospike.Client.ClientPolicy,Aerospike.Client.Host[])">
            <summary>
            Initialize Aerospike client with suitable hosts to seed the cluster map.
            The client policy is used to set defaults and size internal data structures.
            For each host connection that succeeds, the client will:
            <list type="bullet">
            <item>Add host to the cluster map</item>
            <item>Request host's list of other nodes in cluster</item>
            <item>Add these nodes to cluster map</item>
            </list>
            <para>
            In most cases, only one host is necessary to seed the cluster. The remaining hosts 
            are added as future seeds in case of a complete network failure.
            </para>
            <para>
            If one connection succeeds, the client is ready to process database requests.
            If all connections fail and the policy's failIfNotConnected is true, a connection 
            exception will be thrown. Otherwise, the cluster will remain in a disconnected state
            until the server is activated.
            </para>
            </summary>
            <param name="policy">client configuration parameters, pass in null for defaults</param>
            <param name="hosts">array of potential hosts to seed the cluster</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if all host connections fail</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.#ctor(Aerospike.Client.ClientPolicy)">
            <summary>
            Construct client without initialization.
            Should only be used by classes inheriting from this client.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Dispose">
            <summary>
            Close all client connections to database server nodes.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Close">
            <summary>
            Close all client connections to database server nodes.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Put(Aerospike.Client.WritePolicy,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Write record bin(s).
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if write fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Append(Aerospike.Client.WritePolicy,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Append bin string values to existing record bin values.
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            This call only works for string values. 
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if append fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Prepend(Aerospike.Client.WritePolicy,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Prepend bin string values to existing record bin values.
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            This call works only for string values. 
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs </param>
            <exception cref="T:Aerospike.Client.AerospikeException">if prepend fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Add(Aerospike.Client.WritePolicy,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Add integer bin values to existing record bin values.
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            This call only works for integer values. 
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if add fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Delete(Aerospike.Client.WritePolicy,Aerospike.Client.Key)">
            <summary>
            Delete record for specified key.
            Return whether record existed on server before deletion.
            The policy specifies the transaction timeout.
            </summary>
            <param name="policy">delete configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if delete fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Touch(Aerospike.Client.WritePolicy,Aerospike.Client.Key)">
            <summary>
            Reset record's time to expiration using the policy's expiration.
            Fail if the record does not exist.
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if touch fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Exists(Aerospike.Client.Policy,Aerospike.Client.Key)">
            <summary>
            Determine if a record key exists.
            Return whether record exists or not.
            The policy can be used to specify timeouts.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Exists(Aerospike.Client.Policy,Aerospike.Client.Key[])">
            <summary>
            Check if multiple record keys exist in one batch call.
            The returned boolean array is in positional order with the original key array order.
            The policy can be used to specify timeouts.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Exists(Aerospike.Client.BatchPolicy,Aerospike.Client.Key[])">
            <summary>
            Check if multiple record keys exist in one batch call.
            The returned boolean array is in positional order with the original key array order.
            The policy can be used to specify timeouts and maximum concurrent threads.
            </summary>
            <param name="policy">batch configuration parameters, pass in null for defaults</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Get(Aerospike.Client.Policy,Aerospike.Client.Key)">
            <summary>
            Read entire record for specified key.
            If found, return record instance.  If not found, return null.
            The policy can be used to specify timeouts.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults </param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if read fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Get(Aerospike.Client.Policy,Aerospike.Client.Key,System.String[])">
            <summary>
            Read record header and bins for specified key.
            If found, return record instance.  If not found, return null.
            The policy can be used to specify timeouts.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binNames">bins to retrieve</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if read fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetHeader(Aerospike.Client.Policy,Aerospike.Client.Key)">
            <summary>
            Read record generation and expiration only for specified key.  Bins are not read.
            If found, return record instance.  If not found, return null.
            The policy can be used to specify timeouts.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if read fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Get(Aerospike.Client.Policy,Aerospike.Client.Key[])">
            <summary>
            Read multiple records for specified keys in one batch call.
            The returned records are in positional order with the original key array order.
            If a key is not found, the positional record will be null.
            The policy can be used to specify timeouts.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if read fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Get(Aerospike.Client.BatchPolicy,Aerospike.Client.Key[])">
            <summary>
            Read multiple records for specified keys in one batch call.
            The returned records are in positional order with the original key array order.
            If a key is not found, the positional record will be null.
            The policy can be used to specify timeouts and maximum concurrent threads.
            </summary>
            <param name="policy">batch configuration parameters, pass in null for defaults</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if read fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Get(Aerospike.Client.Policy,Aerospike.Client.Key[],System.String[])">
            <summary>
            Read multiple record headers and bins for specified keys in one batch call.
            The returned records are in positional order with the original key array order.
            If a key is not found, the positional record will be null.
            The policy can be used to specify timeouts.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="keys">array of unique record identifiers</param>
            <param name="binNames">array of bins to retrieve</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if read fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Get(Aerospike.Client.BatchPolicy,Aerospike.Client.Key[],System.String[])">
            <summary>
            Read multiple record headers and bins for specified keys in one batch call.
            The returned records are in positional order with the original key array order.
            If a key is not found, the positional record will be null.
            The policy can be used to specify timeouts and maximum concurrent threads.
            </summary>
            <param name="policy">batch configuration parameters, pass in null for defaults</param>
            <param name="keys">array of unique record identifiers</param>
            <param name="binNames">array of bins to retrieve</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if read fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetHeader(Aerospike.Client.Policy,Aerospike.Client.Key[])">
            <summary>
            Read multiple record header data for specified keys in one batch call.
            The returned records are in positional order with the original key array order.
            If a key is not found, the positional record will be null.
            The policy can be used to specify timeouts.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if read fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetHeader(Aerospike.Client.BatchPolicy,Aerospike.Client.Key[])">
            <summary>
            Read multiple record header data for specified keys in one batch call.
            The returned records are in positional order with the original key array order.
            If a key is not found, the positional record will be null.
            The policy can be used to specify timeouts and maximum concurrent threads.
            </summary>
            <param name="policy">batch configuration parameters, pass in null for defaults</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if read fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Join(Aerospike.Client.BatchPolicy,Aerospike.Client.Key,System.String[],Aerospike.Client.Join[])">
            <summary>
            Read specified bins in left record and then join with right records.  Each join bin name
            (Join.leftKeysBinName) must exist in the left record.  The join bin must contain a list of 
            keys. Those key are used to retrieve other records using a separate batch get.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique main record identifier</param>
            <param name="binNames">array of bins to retrieve</param>
            <param name="joins">array of join definitions</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if main read or join reads fail</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Join(Aerospike.Client.BatchPolicy,Aerospike.Client.Key,Aerospike.Client.Join[])">
            <summary>
            Read all bins in left record and then join with right records.  Each join bin name
            (Join.binNameKeys) must exist in the left record.  The join bin must contain a list of 
            keys. Those key are used to retrieve other records using a separate batch get.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique main record identifier</param>
            <param name="joins">array of join definitions</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if main read or join reads fail</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Operate(Aerospike.Client.WritePolicy,Aerospike.Client.Key,Aerospike.Client.Operation[])">
            <summary>
            Perform multiple read/write operations on a single key in one batch call.
            A record will be returned if there is a read in the operations list.
            An example would be to add an integer value to an existing record and then
            read the result, all in one database call.
            <para>
            Write operations are always performed first, regardless of operation order
            relative to read operations.
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="operations">database operations to perform</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.ScanAll(Aerospike.Client.ScanPolicy,System.String,System.String,Aerospike.Client.ScanCallback,System.String[])">
            <summary>
            Read all records in specified namespace and set.  If the policy's 
            concurrentNodes is specified, each server node will be read in
            parallel.  Otherwise, server nodes are read in series.
            <para>
            This call will block until the scan is complete - callbacks are made
            within the scope of this call.
            </para>
            </summary>
            <param name="policy">scan configuration parameters, pass in null for defaults</param>
            <param name="ns">namespace - equivalent to database name</param>
            <param name="setName">optional set name - equivalent to database table</param>
            <param name="callback">read callback method - called with record data</param>
            <param name="binNames">
            optional bin to retrieve. All bins will be returned if not specified.
            Aerospike 2 servers ignore this parameter.
            </param>
            <exception cref="T:Aerospike.Client.AerospikeException">if scan fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.ScanNode(Aerospike.Client.ScanPolicy,System.String,System.String,System.String,Aerospike.Client.ScanCallback,System.String[])">
            <summary>
            Read all records in specified namespace and set for one node only.
            The node is specified by name.
            <para>
            This call will block until the scan is complete - callbacks are made
            within the scope of this call.
            </para>
            </summary>
            <param name="policy">scan configuration parameters, pass in null for defaults</param>
            <param name="nodeName">server node name</param>
            <param name="ns">namespace - equivalent to database name</param>
            <param name="setName">optional set name - equivalent to database table</param>
            <param name="callback">read callback method - called with record data</param>
            <param name="binNames">
            optional bin to retrieve. All bins will be returned if not specified.
            Aerospike 2 servers ignore this parameter.
            </param>
            <exception cref="T:Aerospike.Client.AerospikeException">if scan fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.ScanNode(Aerospike.Client.ScanPolicy,Aerospike.Client.Node,System.String,System.String,Aerospike.Client.ScanCallback,System.String[])">
            <summary>
            Read all records in specified namespace and set for one node only.
            <para>
            This call will block until the scan is complete - callbacks are made
            within the scope of this call.
            </para>
            </summary>
            <param name="policy">scan configuration parameters, pass in null for defaults</param>
            <param name="node">server node</param>
            <param name="ns">namespace - equivalent to database name</param>
            <param name="setName">optional set name - equivalent to database table</param>
            <param name="callback">read callback method - called with record data</param>
            <param name="binNames">
            optional bin to retrieve. All bins will be returned if not specified.
            Aerospike 2 servers ignore this parameter.
            </param>
            <exception cref="T:Aerospike.Client.AerospikeException">if transaction fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetLargeList(Aerospike.Client.Policy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large list operator.  This operator can be used to create and manage a list 
            within a single bin.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="userModule">Lua function name that initializes list configuration parameters, pass null for default</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetLargeList(Aerospike.Client.WritePolicy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large list operator.  This operator can be used to create and manage a list 
            within a single bin.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="userModule">Lua function name that initializes list configuration parameters, pass null for default</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetLargeMap(Aerospike.Client.Policy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large map operator.  This operator can be used to create and manage a map 
            within a single bin.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="userModule">Lua function name that initializes list configuration parameters, pass null for default</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetLargeMap(Aerospike.Client.WritePolicy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large map operator.  This operator can be used to create and manage a map 
            within a single bin.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="userModule">Lua function name that initializes list configuration parameters, pass null for default</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetLargeSet(Aerospike.Client.Policy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large set operator.  This operator can be used to create and manage a set 
            within a single bin.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="userModule">Lua function name that initializes list configuration parameters, pass null for default</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetLargeSet(Aerospike.Client.WritePolicy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large set operator.  This operator can be used to create and manage a set 
            within a single bin.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="userModule">Lua function name that initializes list configuration parameters, pass null for default</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetLargeStack(Aerospike.Client.Policy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large stack operator.  This operator can be used to create and manage a stack 
            within a single bin.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="userModule">Lua function name that initializes list configuration parameters, pass null for default</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GetLargeStack(Aerospike.Client.WritePolicy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large stack operator.  This operator can be used to create and manage a stack 
            within a single bin.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="userModule">Lua function name that initializes list configuration parameters, pass null for default</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Register(Aerospike.Client.Policy,System.String,System.String,Aerospike.Client.Language)">
            <summary>
            Register package located in a file containing user defined functions with server.
            This asynchronous server call will return before command is complete.
            The user can optionally wait for command completion by using the returned
            RegisterTask instance.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="clientPath">path of client file containing user defined functions, relative to current directory</param>
            <param name="serverPath">path to store user defined functions on the server, relative to configured script directory.</param>
            <param name="language">language of user defined functions</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if register fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Register(Aerospike.Client.Policy,System.Reflection.Assembly,System.String,System.String,Aerospike.Client.Language)">
            <summary>
            Register package located in a resource containing user defined functions with server.
            This asynchronous server call will return before command is complete.
            The user can optionally wait for command completion by using the returned
            RegisterTask instance.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="resourceAssembly">assembly where resource is located.  Current assembly can be obtained by: Assembly.GetExecutingAssembly()</param>
            <param name="resourcePath">namespace path where Lua resource is located.  Example: Aerospike.Client.Resources.mypackage.lua</param>
            <param name="serverPath">path to store user defined functions on the server, relative to configured script directory.</param>
            <param name="language">language of user defined functions</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if register fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Execute(Aerospike.Client.Policy,Aerospike.Client.Key,System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Execute user defined function on server and return results.
            The function operates on a single record.
            The package name is used to locate the udf file location:
            <para>
            udf file = &lt;server udf dir&gt;/&lt;package name&gt;.lua
            </para>
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="packageName">server package name where user defined function resides</param>
            <param name="functionName">user defined function</param>
            <param name="args">arguments passed in to user defined function</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if transaction fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Execute(Aerospike.Client.WritePolicy,Aerospike.Client.Key,System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Execute user defined function on server and return results.
            The function operates on a single record.
            The package name is used to locate the udf file location:
            <para>
            udf file = &lt;server udf dir&gt;/&lt;package name&gt;.lua
            </para>
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="packageName">server package name where user defined function resides</param>
            <param name="functionName">user defined function</param>
            <param name="args">arguments passed in to user defined function</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if transaction fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Execute(Aerospike.Client.Policy,Aerospike.Client.Statement,System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Apply user defined function on records that match the statement filter.
            Records are not returned to the client.
            This asynchronous server call will return before command is complete.  
            The user can optionally wait for command completion by using the returned 
            ExecuteTask instance.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">configuration parameters, pass in null for defaults</param>
            <param name="statement">record filter</param>
            <param name="packageName">server package where user defined function resides</param>
            <param name="functionName">function name</param>
            <param name="functionArgs">to pass to function name, if any</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Execute(Aerospike.Client.WritePolicy,Aerospike.Client.Statement,System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Apply user defined function on records that match the statement filter.
            Records are not returned to the client.
            This asynchronous server call will return before command is complete.  
            The user can optionally wait for command completion by using the returned 
            ExecuteTask instance.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">configuration parameters, pass in null for defaults</param>
            <param name="statement">record filter</param>
            <param name="packageName">server package where user defined function resides</param>
            <param name="functionName">function name</param>
            <param name="functionArgs">to pass to function name, if any</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Query(Aerospike.Client.QueryPolicy,Aerospike.Client.Statement,System.Action{Aerospike.Client.Key,Aerospike.Client.Record})">
            <summary>
            Execute query and call action for each record returned from server.
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="statement">database query command</param>
            <param name="action">action methods to be called for each record</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if query fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.Query(Aerospike.Client.QueryPolicy,Aerospike.Client.Statement)">
            <summary>
            Execute query and return record iterator.  The query executor puts records on a queue in 
            separate threads.  The calling thread concurrently pops records off the queue through the 
            record iterator.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="statement">database query command</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if query fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.QueryAggregate(Aerospike.Client.QueryPolicy,Aerospike.Client.Statement,System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Execute query, apply statement's aggregation function, and return result iterator. 
            The aggregation function should be located in a Lua script file that can be found from the 
            "LuaConfig.PackagePath" paths static variable.  The default package path is "udf/?.lua"
            where "?" is the packageName.
            <para>
            The query executor puts results on a queue in separate threads.  The calling thread 
            concurrently pops results off the queue through the ResultSet iterator.
            The aggregation function is called on both server and client (final reduce).
            Therefore, the Lua script file must also reside on both server and client.
            </para>
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="statement">database query command</param>
            <param name="packageName">server package where user defined function resides</param>
            <param name="functionName">aggregation function name</param>
            <param name="functionArgs">arguments to pass to function name, if any</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if query fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.QueryAggregate(Aerospike.Client.QueryPolicy,Aerospike.Client.Statement,System.Action{System.Object})">
            <summary>
            Execute query, apply statement's aggregation function, call action for each aggregation
            object returned from server. 
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="statement">database query command with aggregate functions already initialized by SetAggregateFunction()</param>
            <param name="action">action methods to be called for each aggregation object</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if query fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.QueryAggregate(Aerospike.Client.QueryPolicy,Aerospike.Client.Statement)">
            <summary>
            Execute query, apply statement's aggregation function, and return result iterator. 
            The aggregation function should be initialized via the statement's SetAggregateFunction()
            and should be located in a Lua resource file located in an assembly.
            <para>
            The query executor puts results on a queue in separate threads.  The calling thread 
            concurrently pops results off the queue through the ResultSet iterator.
            The aggregation function is called on both server and client (final reduce).
            Therefore, the Lua script file must also reside on both server and client.
            </para>
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="statement">database query command with aggregate functions already initialized by SetAggregateFunction()</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if query fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.CreateIndex(Aerospike.Client.Policy,System.String,System.String,System.String,System.String,Aerospike.Client.IndexType)">
            <summary>
            Create scalar secondary index.
            This asynchronous server call will return before command is complete.
            The user can optionally wait for command completion by using the returned
            IndexTask instance.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="ns">namespace - equivalent to database name</param>
            <param name="setName">optional set name - equivalent to database table</param>
            <param name="indexName">name of secondary index</param>
            <param name="binName">bin name that data is indexed on</param>
            <param name="indexType">underlying data type of secondary index</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if index create fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.CreateIndex(Aerospike.Client.Policy,System.String,System.String,System.String,System.String,Aerospike.Client.IndexType,Aerospike.Client.IndexCollectionType)">
            <summary>
            Create complex secondary index on bins containing collections.
            This asynchronous server call will return before command is complete.
            The user can optionally wait for command completion by using the returned
            IndexTask instance.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="ns">namespace - equivalent to database name</param>
            <param name="setName">optional set name - equivalent to database table</param>
            <param name="indexName">name of secondary index</param>
            <param name="binName">bin name that data is indexed on</param>
            <param name="indexType">underlying data type of secondary index</param>
            <param name="indexCollectionType">index collection type</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if index create fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.DropIndex(Aerospike.Client.Policy,System.String,System.String,System.String)">
            <summary>
            Delete secondary index.
            <para>
            This method is only supported by Aerospike 3 servers.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="ns">namespace - equivalent to database name</param>
            <param name="setName">optional set name - equivalent to database table</param>
            <param name="indexName">name of secondary index</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if index create fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.CreateUser(Aerospike.Client.AdminPolicy,System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Create user with password and roles.  Clear-text password will be hashed using bcrypt 
            before sending to server.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="user">user name</param>
            <param name="password">user password in clear-text format</param>
            <param name="roles">variable arguments array of role names.  Predefined roles are listed in Role.cs</param>		
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.DropUser(Aerospike.Client.AdminPolicy,System.String)">
            <summary>
            Remove user from cluster.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="user">user name</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.ChangePassword(Aerospike.Client.AdminPolicy,System.String,System.String)">
            <summary>
            Change user's password.  Clear-text password will be hashed using bcrypt 
            before sending to server.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="user">user name</param>
            <param name="password">user password in clear-text format</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GrantRoles(Aerospike.Client.AdminPolicy,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Add roles to user's list of roles.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="user">user name</param>
            <param name="roles">role names.  Predefined roles are listed in Role.cs</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.RevokeRoles(Aerospike.Client.AdminPolicy,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Remove roles from user's list of roles.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="user">user name</param>
            <param name="roles">role names.  Predefined roles are listed in Role.cs</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.CreateRole(Aerospike.Client.AdminPolicy,System.String,System.Collections.Generic.IList{Aerospike.Client.Privilege})">
            <summary>
            Create user defined role.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="roleName">role name</param>
            <param name="privileges">privileges assigned to the role.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails </exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.DropRole(Aerospike.Client.AdminPolicy,System.String)">
            <summary>
            Drop user defined role.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="roleName">role name</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.GrantPrivileges(Aerospike.Client.AdminPolicy,System.String,System.Collections.Generic.IList{Aerospike.Client.Privilege})">
            <summary>
            Grant privileges to an user defined role.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="roleName">role name</param>
            <param name="privileges">privileges assigned to the role.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.RevokePrivileges(Aerospike.Client.AdminPolicy,System.String,System.Collections.Generic.IList{Aerospike.Client.Privilege})">
            <summary>
            Revoke privileges from an user defined role.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="roleName">role name</param>
            <param name="privileges">privileges assigned to the role.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.QueryUser(Aerospike.Client.AdminPolicy,System.String)">
            <summary>
            Retrieve roles for a given user.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="user">user name filter</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.QueryUsers(Aerospike.Client.AdminPolicy)">
            <summary>
            Retrieve all users and their roles.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.QueryRole(Aerospike.Client.AdminPolicy,System.String)">
            <summary>
            Retrieve role definition.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <param name="roleName">role name filter</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="M:Aerospike.Client.AerospikeClient.QueryRoles(Aerospike.Client.AdminPolicy)">
            <summary>
            Retrieve all roles.
            </summary>
            <param name="policy">admin configuration parameters, pass in null for defaults</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if command fails</exception>
        </member>
        <member name="P:Aerospike.Client.AerospikeClient.Connected">
            <summary>
            Return if we are ready to talk to the database server cluster.
            </summary>
        </member>
        <member name="P:Aerospike.Client.AerospikeClient.Nodes">
            <summary>
            Return array of active server nodes in the cluster.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.#ctor(System.String,System.Int32)">
            <summary>
            Initialize asynchronous client.
            If the host connection succeeds, the client will:
            <list type="bullet">
            <item>Add host to the cluster map</item>
            <item>Request host's list of other nodes in cluster</item>
            <item>Add these nodes to cluster map</item>
            </list>
            <para>
            If the connection succeeds, the client is ready to process database requests.
            If the connection fails, the cluster will remain in a disconnected state
            until the server is activated.
            </para>
            </summary>
            <param name="hostname">host name</param>
            <param name="port">host port</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if host connection fails</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.#ctor(Aerospike.Client.AsyncClientPolicy,System.String,System.Int32)">
            <summary>
            Initialize asynchronous client.
            The client policy is used to set defaults and size internal data structures.
            If the host connection succeeds, the client will:
            <list type="bullet">
            <item>Add host to the cluster map</item>
            <item>Request host's list of other nodes in cluster</item>
            <item>Add these nodes to cluster map</item>
            </list>
            <para>
            If the connection succeeds, the client is ready to process database requests.
            If the connection fails and the policy's failOnInvalidHosts is true, a connection 
            exception will be thrown. Otherwise, the cluster will remain in a disconnected state
            until the server is activated.
            </para>
            </summary>
            <param name="policy">client configuration parameters, pass in null for defaults</param>
            <param name="hostname">host name</param>
            <param name="port">host port</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if host connection fails</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.#ctor(Aerospike.Client.AsyncClientPolicy,Aerospike.Client.Host[])">
            <summary>
            Initialize asynchronous client with suitable hosts to seed the cluster map.
            The client policy is used to set defaults and size internal data structures.
            For each host connection that succeeds, the client will:
            <list type="bullet">
            <item>Add host to the cluster map</item>
            <item>Request host's list of other nodes in cluster</item>
            <item>Add these nodes to cluster map</item>
            </list>
            <para>
            In most cases, only one host is necessary to seed the cluster. The remaining hosts 
            are added as future seeds in case of a complete network failure.
            </para>
            <para>
            If one connection succeeds, the client is ready to process database requests.
            If all connections fail and the policy's failIfNotConnected is true, a connection 
            exception will be thrown. Otherwise, the cluster will remain in a disconnected state
            until the server is activated.
            </para>
            </summary>
            <param name="policy">client configuration parameters, pass in null for defaults</param>
            <param name="hosts">array of potential hosts to seed the cluster</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if all host connections fail</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Put(Aerospike.Client.WritePolicy,System.Threading.CancellationToken,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Asynchronously write record bin(s). 
            Create listener, call asynchronous put and return task monitor.
            <para>
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Put(Aerospike.Client.WritePolicy,Aerospike.Client.WriteListener,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Asynchronously write record bin(s). 
            Schedules the put command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results, pass in null for fire and forget</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Append(Aerospike.Client.WritePolicy,System.Threading.CancellationToken,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Asynchronously append bin string values to existing record bin values.
            Create listener, call asynchronous append and return task monitor.
            <para>
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            This call only works for string values. 
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Append(Aerospike.Client.WritePolicy,Aerospike.Client.WriteListener,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Asynchronously append bin string values to existing record bin values.
            Schedule the append command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            This call only works for string values. 
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results, pass in null for fire and forget</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Prepend(Aerospike.Client.WritePolicy,System.Threading.CancellationToken,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Asynchronously prepend bin string values to existing record bin values.
            Create listener, call asynchronous prepend and return task monitor.
            <para>
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            This call works only for string values. 
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Prepend(Aerospike.Client.WritePolicy,Aerospike.Client.WriteListener,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Asynchronously prepend bin string values to existing record bin values.
            Schedule the prepend command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            This call works only for string values. 
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results, pass in null for fire and forget</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Add(Aerospike.Client.WritePolicy,System.Threading.CancellationToken,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Asynchronously add integer bin values to existing record bin values.
            Create listener, call asynchronous add and return task monitor.
            <para>
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            This call only works for integer values. 
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Add(Aerospike.Client.WritePolicy,Aerospike.Client.WriteListener,Aerospike.Client.Key,Aerospike.Client.Bin[])">
            <summary>
            Asynchronously add integer bin values to existing record bin values.
            Schedule the add command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            The policy specifies the transaction timeout, record expiration and how the transaction is
            handled when the record already exists.
            This call only works for integer values. 
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results, pass in null for fire and forget</param>
            <param name="key">unique record identifier</param>
            <param name="bins">array of bin name/value pairs</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Delete(Aerospike.Client.WritePolicy,System.Threading.CancellationToken,Aerospike.Client.Key)">
            <summary>
            Asynchronously delete record for specified key.
            Create listener, call asynchronous delete and return task monitor.
            <para>
            The policy specifies the transaction timeout.
            </para>
            </summary>
            <param name="policy">delete configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Delete(Aerospike.Client.WritePolicy,Aerospike.Client.DeleteListener,Aerospike.Client.Key)">
            <summary>
            Asynchronously delete record for specified key.
            Schedule the delete command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            The policy specifies the transaction timeout.
            </para>
            </summary>
            <param name="policy">delete configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results, pass in null for fire and forget</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Touch(Aerospike.Client.WritePolicy,System.Threading.CancellationToken,Aerospike.Client.Key)">
            <summary>
            Asynchronously create record if it does not already exist.
            Create listener, call asynchronous touch and return task monitor.
            If the record exists, the record's time to expiration will be reset to the policy's 
            expiration.
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Touch(Aerospike.Client.WritePolicy,Aerospike.Client.WriteListener,Aerospike.Client.Key)">
            <summary>
            Asynchronously create record if it does not already exist.
            Schedule the touch command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            If the record exists, the record's time to expiration will be reset to the policy's 
            expiration.
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results, pass in null for fire and forget</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Exists(Aerospike.Client.Policy,System.Threading.CancellationToken,Aerospike.Client.Key)">
            <summary>
            Asynchronously determine if a record key exists.
            Create listener, call asynchronous exists and return task monitor.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Exists(Aerospike.Client.Policy,Aerospike.Client.ExistsListener,Aerospike.Client.Key)">
            <summary>
            Asynchronously determine if a record key exists.
            Schedule the exists command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Exists(Aerospike.Client.Policy,System.Threading.CancellationToken,Aerospike.Client.Key[])">
            <summary>
            Asynchronously check if multiple record keys exist in one batch call.
            Create listener, call asynchronous array exists and return task monitor.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Exists(Aerospike.Client.Policy,Aerospike.Client.ExistsArrayListener,Aerospike.Client.Key[])">
            <summary>
            Asynchronously check if multiple record keys exist in one batch call.
            Schedule the array exists command with a channel selector and return.
            Another thread will process the command and send the results to the listener in a single call.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Exists(Aerospike.Client.Policy,Aerospike.Client.ExistsSequenceListener,Aerospike.Client.Key[])">
            <summary>
            Asynchronously check if multiple record keys exist in one batch call.
            Schedule the exists command with a channel selector and return.
            Another thread will process the command and send the results to the listener in multiple unordered calls.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,System.Threading.CancellationToken,Aerospike.Client.Key)">
            <summary>
            Asynchronously read entire record for specified key.
            Create listener, call asynchronous get and return task monitor.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,Aerospike.Client.RecordListener,Aerospike.Client.Key)">
            <summary>
            Asynchronously read entire record for specified key.
            Schedule the get command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,System.Threading.CancellationToken,Aerospike.Client.Key,System.String[])">
            <summary>
            Asynchronously read record header and bins for specified key.
            Create listener, call asynchronous get and return task monitor.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <param name="binNames">bins to retrieve</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,Aerospike.Client.RecordListener,Aerospike.Client.Key,System.String[])">
            <summary>
            Asynchronously read record header and bins for specified key.
            Schedule the get command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="key">unique record identifier</param>
            <param name="binNames">bins to retrieve</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.GetHeader(Aerospike.Client.Policy,System.Threading.CancellationToken,Aerospike.Client.Key)">
            <summary>
            Asynchronously read record generation and expiration only for specified key.  Bins are not read.
            Create listener, call asynchronous get header and return task monitor.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.GetHeader(Aerospike.Client.Policy,Aerospike.Client.RecordListener,Aerospike.Client.Key)">
            <summary>
            Asynchronously read record generation and expiration only for specified key.  Bins are not read.
            Schedule the get command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="key">unique record identifier</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,System.Threading.CancellationToken,Aerospike.Client.Key[])">
            <summary>
            Asynchronously read multiple records for specified keys in one batch call.
            Create listener, call asynchronous batch get and return task monitor.
            <para>
            If a key is not found, the record will be null.
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,Aerospike.Client.RecordArrayListener,Aerospike.Client.Key[])">
            <summary>
            Asynchronously read multiple records for specified keys in one batch call.
            Schedule the batch get command with a channel selector and return.
            Another thread will process the command and send the results to the listener in a single call.
            <para>
            If a key is not found, the record will be null.
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,Aerospike.Client.RecordSequenceListener,Aerospike.Client.Key[])">
            <summary>
            Asynchronously read multiple records for specified keys in one batch call.
            Schedule the get command with a channel selector and return.
            Another thread will process the command and send the results to the listener in multiple unordered calls.
            <para>
            If a key is not found, the record will be null.
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,System.Threading.CancellationToken,Aerospike.Client.Key[],System.String[])">
            <summary>
            Asynchronously read multiple record headers and bins for specified keys in one batch call.
            Create listener, call asynchronous batch get and return task monitor.
            <para>
            If a key is not found, the record will be null.
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="keys">array of unique record identifiers</param>
            <param name="binNames">array of bins to retrieve</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,Aerospike.Client.RecordArrayListener,Aerospike.Client.Key[],System.String[])">
            <summary>
            Asynchronously read multiple record headers and bins for specified keys in one batch call.
            Schedule the batch get command with a channel selector and return.
            Another thread will process the command and send the results to the listener in a single call.
            <para>
            If a key is not found, the record will be null.
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="keys">array of unique record identifiers</param>
            <param name="binNames">array of bins to retrieve</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Get(Aerospike.Client.Policy,Aerospike.Client.RecordSequenceListener,Aerospike.Client.Key[],System.String[])">
            <summary>
            Asynchronously read multiple record headers and bins for specified keys in one batch call.
            Schedule the batch get command with a channel selector and return.
            Another thread will process the command and send the results to the listener in multiple unordered calls.
            <para>
            If a key is not found, the record will be null.
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="keys">array of unique record identifiers</param>
            <param name="binNames">array of bins to retrieve</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.GetHeader(Aerospike.Client.Policy,System.Threading.CancellationToken,Aerospike.Client.Key[])">
            <summary>
            Asynchronously read multiple record header data for specified keys in one batch call.
            Create listener, call asynchronous batch header get and return task monitor.
            <para>
            If a key is not found, the record will be null.
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.GetHeader(Aerospike.Client.Policy,Aerospike.Client.RecordArrayListener,Aerospike.Client.Key[])">
            <summary>
            Asynchronously read multiple record header data for specified keys in one batch call.
            Schedule the batch get header command with a channel selector and return.
            Another thread will process the command and send the results to the listener in a single call.
            <para>
            If a key is not found, the record will be null.
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.GetHeader(Aerospike.Client.Policy,Aerospike.Client.RecordSequenceListener,Aerospike.Client.Key[])">
            <summary>
            Asynchronously read multiple record header data for specified keys in one batch call.
            Schedule the batch get header command with a channel selector and return.
            Another thread will process the command and send the results to the listener in multiple unordered calls.
            <para>
            If a key is not found, the record will be null.
            The policy can be used to specify timeouts.
            </para>
            </summary>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results</param>
            <param name="keys">array of unique record identifiers</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Operate(Aerospike.Client.WritePolicy,System.Threading.CancellationToken,Aerospike.Client.Key,Aerospike.Client.Operation[])">
            <summary>
            Asynchronously perform multiple read/write operations on a single key in one batch call.
            Create listener, call asynchronous operate and return task monitor.
            <para>
            An example would be to add an integer value to an existing record and then
            read the result, all in one database call.
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="token">cancellation token</param>
            <param name="key">unique record identifier</param>
            <param name="operations">database operations to perform</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.Operate(Aerospike.Client.WritePolicy,Aerospike.Client.RecordListener,Aerospike.Client.Key,Aerospike.Client.Operation[])">
            <summary>
            Asynchronously perform multiple read/write operations on a single key in one batch call.
            Schedule the operate command with a channel selector and return.
            Another thread will process the command and send the results to the listener.
            <para>
            An example would be to add an integer value to an existing record and then
            read the result, all in one database call.
            </para>
            </summary>
            <param name="policy">write configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results, pass in null for fire and forget</param>
            <param name="key">unique record identifier</param>
            <param name="operations">database operations to perform</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="M:Aerospike.Client.AsyncClient.ScanAll(Aerospike.Client.ScanPolicy,Aerospike.Client.RecordSequenceListener,System.String,System.String,System.String[])">
            <summary>
            Asynchronously read all records in specified namespace and set.  If the policy's 
            concurrentNodes is specified, each server node will be read in
            parallel.  Otherwise, server nodes are read in series.
            <para>
            This method schedules the scan command with a channel selector and returns.
            Another thread will process the command and send the results to the listener.
            </para>
            </summary>
            <param name="policy">scan configuration parameters, pass in null for defaults</param>
            <param name="listener">where to send results, pass in null for fire and forget</param>
            <param name="ns">namespace - equivalent to database name</param>
            <param name="setName">optional set name - equivalent to database table</param>
            <param name="binNames">
            optional bin to retrieve. All bins will be returned if not specified.
            Aerospike 2 servers ignore this parameter.
            </param>
            <exception cref="T:Aerospike.Client.AerospikeException">if queue is full</exception>
        </member>
        <member name="T:Aerospike.Client.Value">
            <summary>
            Polymorphic value classes used to efficiently serialize objects into the wire protocol.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.String)">
            <summary>
            Get string or null value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Byte[])">
            <summary>
            Get byte array or null value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get byte array segment or null value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Double)">
            <summary>
            Get double value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Single)">
            <summary>
            Get float value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Int64)">
            <summary>
            Get long value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.UInt64)">
            <summary>
            Get unsigned long value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Int32)">
            <summary>
            Get integer value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.UInt32)">
            <summary>
            Get unsigned integer value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Int16)">
            <summary>
            Get short value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.UInt16)">
            <summary>
            Get short value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Boolean)">
            <summary>
            Get boolean value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Byte)">
            <summary>
            Get boolean value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.SByte)">
            <summary>
            Get signed boolean value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Collections.IList)">
            <summary>
            Get list or null value instance.
            Support by Aerospike 3 servers only.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Collections.IDictionary)">
            <summary>
            Get map or null value instance.
            Support by Aerospike 3 servers only.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(Aerospike.Client.Value[])">
            <summary>
            Get value array instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.GetAsBlob(System.Object)">
            <summary>
            Get blob or null value instance.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.GetAsList(System.Collections.IList)">
            <summary>
            Get list or null value instance.
            Support by Aerospike 3 servers only.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.GetAsMap(System.Collections.IDictionary)">
            <summary>
            Get map or null value instance.
            Support by Aerospike 3 servers only.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Get(System.Object)">
            <summary>
            Determine value given generic object.
            This is the slowest of the Value get() methods.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.EstimateSize">
            <summary>
            Calculate number of bytes necessary to serialize the value in the wire protocol.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Write(System.Byte[],System.Int32)">
            <summary>
            Serialize the value in the wire protocol.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.Pack(Aerospike.Client.Packer)">
            <summary>
            Serialize the value using MessagePack.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.ValidateKeyType">
            <summary>
            Validate if value type can be used as a key.
            </summary>
            <exception cref="T:Aerospike.Client.AerospikeException">if type can't be used as a key.</exception>
        </member>
        <member name="M:Aerospike.Client.Value.ToInteger">
            <summary>
            Return value as an integer.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.ToUnsignedInteger">
            <summary>
            Return value as an unsigned integer.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.ToLong">
            <summary>
            Return value as a long.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Value.ToUnsignedLong">
            <summary>
            Return value as an unsigned long.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Value.AsNull">
            <summary>
            Get null value instance.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Value.Type">
            <summary>
            Get wire protocol value type.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Value.Object">
            <summary>
            Return original value as an Object.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.NullValue">
            <summary>
            Empty value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.StringValue">
            <summary>
            String value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.BytesValue">
            <summary>
            Byte array value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.ByteSegmentValue">
            <summary>
            Byte segment value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.DoubleValue">
            <summary>
            Double value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.FloatValue">
            <summary>
            Float value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.LongValue">
            <summary>
            Long value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.UnsignedLongValue">
            <summary>
            Unsigned long value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.IntegerValue">
            <summary>
            Integer value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.UnsignedIntegerValue">
            <summary>
            Unsigned integer value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.ShortValue">
            <summary>
            Short value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.UnsignedShortValue">
            <summary>
            Unsigned short value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.BooleanValue">
            <summary>
            Boolean value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.ByteValue">
            <summary>
            Byte value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.SignedByteValue">
            <summary>
            Byte value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.BlobValue">
            <summary>
            Blob value.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.ValueArray">
            <summary>
            Value array.
            Supported by Aerospike 3 servers only.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.ListValue">
            <summary>
            List value.
            Supported by Aerospike 3 servers only.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Value.MapValue">
            <summary>
            Map value.
            Supported by Aerospike 3 servers only.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Statement">
            <summary>
            Query statement parameters.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Statement.SetNamespace(System.String)">
            <summary>
            Set query namespace.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Statement.SetSetName(System.String)">
            <summary>
            Set optional query setname.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Statement.SetIndexName(System.String)">
            <summary>
            Set optional query index name.  If not set, the server
            will determine the index from the filter's bin name.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Statement.SetBinNames(System.String[])">
            <summary>
            Set query bin names.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Statement.SetFilters(Aerospike.Client.Filter[])">
            <summary>
            Set optional query filters.
            Currently, only one filter is allowed by the server on a secondary index lookup.
            If multiple filters are necessary, see QueryFilter example for a workaround.
            QueryFilter demonstrates how to add additional filters in an user-defined 
            aggregation function. 
            </summary>
        </member>
        <member name="M:Aerospike.Client.Statement.SetTaskId(System.Int64)">
            <summary>
            Set optional query task id.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Statement.SetAggregateFunction(System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Set Lua aggregation function parameters for a Lua package located on the filesystem.  
            This function will be called on both the server and client for each selected item.
            </summary>
            <param name="packageName">server package where user defined function resides</param>
            <param name="functionName">aggregation function name</param>
            <param name="functionArgs">arguments to pass to function name, if any</param>
        </member>
        <member name="M:Aerospike.Client.Statement.SetAggregateFunction(System.Reflection.Assembly,System.String,System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Set Lua aggregation function parameters for a Lua package located in an assembly resource.  
            This function will be called on both the server and client for each selected item.
            </summary>
            <param name="resourceAssembly">assembly where resource is located.  Current assembly can be obtained by: Assembly.GetExecutingAssembly()"</param>
            <param name="resourcePath">namespace path where Lua resource is located.  Example: Aerospike.Client.Resources.mypackage.lua</param>
            <param name="packageName">server package where user defined function resides</param>
            <param name="functionName">aggregation function name</param>
            <param name="functionArgs">arguments to pass to function name, if any</param>
        </member>
        <member name="M:Aerospike.Client.Statement.Prepare(System.Boolean)">
            <summary>
            Prepare statement just prior to execution.
            </summary>
        </member>
        <member name="T:Aerospike.Client.LargeSet">
            <summary>
            Create and manage a list within a single bin.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeSet.#ctor(Aerospike.Client.AerospikeClient,Aerospike.Client.WritePolicy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large set operator.
            </summary>
            <param name="client">client</param>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="createModule">Lua function name that initializes list configuration parameters, pass null for default set</param>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Add(Aerospike.Client.Value)">
            <summary>
            Add a value to the set.  If the set does not exist, create it using specified userModule configuration.
            </summary>
            <param name="value">value to add</param>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Add(Aerospike.Client.Value[])">
            <summary>
            Add values to the set.  If the set does not exist, create it using specified userModule configuration.
            </summary>
            <param name="values">values to add</param>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Add(System.Collections.IList)">
            <summary>
            Add values to the list.  If the list does not exist, create it using specified userModule configuration.
            </summary>
            <param name="values">values to add</param>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Remove(Aerospike.Client.Value)">
            <summary>
            Delete value from set.
            </summary>
            <param name="value">value to delete</param>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Get(Aerospike.Client.Value)">
            <summary>
            Select value from set.
            </summary>
            <param name="value">value to select</param>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Exists(Aerospike.Client.Value)">
            <summary>
            Check existence of value in the set.
            </summary>
            <param name="value">value to check</param>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Scan">
            <summary>
            Return list of all objects in the set.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Filter(System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Select values from set and apply specified Lua filter.
            </summary>
            <param name="filterModule">Lua module name which contains filter function</param>
            <param name="filterName">Lua function name which applies filter to returned list</param>
            <param name="filterArgs">arguments to Lua function name</param>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Destroy">
            <summary>
            Delete bin containing the set.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeSet.Size">
            <summary>
            Return size of set.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeSet.GetConfig">
            <summary>
            Return map of set configuration parameters.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeSet.SetCapacity(System.Int32)">
            <summary>
            Set maximum number of entries in the set.
            </summary>
            <param name="capacity">max entries in set </param>
        </member>
        <member name="M:Aerospike.Client.LargeSet.GetCapacity">
            <summary>
            Return maximum number of entries in the set.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BatchCommandExists.ParseRecordResults(System.Int32)">
            <summary>
            Parse all results in the batch.  Add records to shared list.
            If the record was not found, the bins will be null.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Bin">
            <summary>
            Column name/value pair. 
            </summary>
        </member>
        <member name="F:Aerospike.Client.Bin.name">
            <summary>
            Bin name. Current limit is 14 characters.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Bin.value">
            <summary>
            Bin value.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,Aerospike.Client.Value)">
            <summary>
            Constructor, specifying bin name and value.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.String)">
            <summary>
            Constructor, specifying bin name and string value.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Byte[])">
            <summary>
            Constructor, specifying bin name and byte array value.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructor, specifying bin name and byte array segment value.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">byte array value</param>
            <param name="offset">byte array segment offset</param>
            <param name="length">byte array segment length</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Double)">
            <summary>
            Constructor, specifying bin name and double value.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Single)">
            <summary>
            Constructor, specifying bin name and float value.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Int64)">
            <summary>
            Constructor, specifying bin name and long value.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.UInt64)">
            <summary>
            Constructor, specifying bin name and unsigned long value.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Int32)">
            <summary>
            Constructor, specifying bin name and integer value.
            The server will convert all integers to longs.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.UInt32)">
            <summary>
            Constructor, specifying bin name and unsigned integer value.
            The server will convert all integers to longs.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Int16)">
            <summary>
            Constructor, specifying bin name and short value.
            The server will convert all shorts to longs.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.UInt16)">
            <summary>
            Constructor, specifying bin name and unsigned short value.
            The server will convert all shorts to longs.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor, specifying bin name and boolean value.
            The server will convert all bools to longs.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Byte)">
            <summary>
            Constructor, specifying bin name and byte value.
            The server will convert all byte integers to longs.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.SByte)">
            <summary>
            Constructor, specifying bin name and signed byte value.
            The server will convert all byte integers to longs.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Collections.IList)">
            <summary>
            Create bin with a list value.  The list value will be serialized as a Aerospike 3 server list type.
            Supported by Aerospike 3 servers only. 
            <para>
            If connecting to Aerospike 2 servers, use the following instead:
            </para>
            <code>
            Bin bin = new Bin(name, (Object)list);
            </code>
            <para>
            For servers configured as "single-bin", enter a null or empty name.
            </para>
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Collections.IDictionary)">
            <summary>
            Create bin with a map value.  The map value will be serialized as a Aerospike 3 server map type.
            Supported by Aerospike 3 servers only. 
            <para>
            If connecting to Aerospike 2 servers, use the following instead:
            </para>
            <code>
            Bin bin = new Bin(name, (Object)map);
            </code>
            <para>
            For servers configured as "single-bin", enter a null or empty name.
            </para>
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.#ctor(System.String,System.Object)">
            <summary>
            Constructor, specifying bin name and object value.
            This is the slowest of the Bin constructors because the type
            must be determined using multiple "instanceof" checks.
            <para>
            For servers configured as "single-bin", enter a null or empty name.
            </para>
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.AsList(System.String,System.Collections.IList)">
            <summary>
            Create bin with a list value.  The list value will be serialized as a Aerospike 3 server list type.
            Supported by Aerospike 3 servers only.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.AsMap(System.String,System.Collections.IDictionary)">
            <summary>
            Create bin with a map value.  The map value will be serialized as a Aerospike 3 server map type.
            Supported by Aerospike 3 servers only.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.AsBlob(System.String,System.Object)">
            <summary>
            Create bin with a blob value.  The value will be java serialized.
            This method is faster than the bin Object constructor because the blob is converted 
            directly instead of using multiple "instanceof" type checks with a blob default.
            <para>
            For servers configured as "single-bin", enter a null or empty name.
            </para>
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
            <param name="value">bin value</param>
        </member>
        <member name="M:Aerospike.Client.Bin.AsNull(System.String)">
            <summary>
            Create bin with a null value. This is useful for bin deletions within a record.
            For servers configured as "single-bin", enter a null or empty name.
            </summary>
            <param name="name">bin name, current limit is 14 characters</param>
        </member>
        <member name="M:Aerospike.Client.Bin.ToString">
            <summary>
            Return string representation of bin.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AsyncNode">
            <summary>
            Asynchronous server node representation.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Node">
            <summary>
            Server node representation.  This class manages server node connections and health status.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Node.PARTITIONS">
            <summary>
            Number of partitions for each namespace.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Node.#ctor(Aerospike.Client.Cluster,Aerospike.Client.NodeValidator)">
            <summary>
            Initialize server node with connection parameters.
            </summary>
            <param name="cluster">collection of active server nodes</param>
            <param name="nv">connection parameters</param>
        </member>
        <member name="M:Aerospike.Client.Node.Refresh(System.Collections.Generic.List{Aerospike.Client.Host})">
            <summary>
            Request current status from server node.
            </summary>
            <param name="friends">other nodes in the cluster, populated by this method</param>
            <exception cref="T:System.Exception">if status request fails</exception>
        </member>
        <member name="M:Aerospike.Client.Node.GetConnection(System.Int32)">
            <summary>
            Get a socket connection from connection pool to the server node.
            </summary>
            <param name="timeoutMillis">connection timeout value in milliseconds if a new connection is created</param>	
            <exception cref="T:Aerospike.Client.AerospikeException">if a connection could not be provided</exception>
        </member>
        <member name="M:Aerospike.Client.Node.PutConnection(Aerospike.Client.Connection)">
            <summary>
            Put connection back into connection pool.
            </summary>
            <param name="conn">socket connection</param>
        </member>
        <member name="M:Aerospike.Client.Node.AddAlias(Aerospike.Client.Host)">
            <summary>
            Add node alias to list.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Node.ToString">
            <summary>
            Return node name and host address in string format.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Node.GetHashCode">
            <summary>
            Get node name hash code.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Node.Equals(System.Object)">
            <summary>
            Return if node names are equal.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Node.Close">
            <summary>
            Close all server node socket connections.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Node.Host">
            <summary>
            Return server node IP address and port.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Node.Active">
            <summary>
            Return whether node is currently active.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Node.Name">
            <summary>
            Return server node name.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Node.Aliases">
            <summary>
            Return server node IP address aliases.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AsyncNode.#ctor(Aerospike.Client.AsyncCluster,Aerospike.Client.NodeValidator)">
            <summary>
            Initialize server node with connection parameters.
            </summary>
            <param name="cluster">collection of active server nodes</param>
            <param name="nv">connection parameters</param>
        </member>
        <member name="M:Aerospike.Client.AsyncNode.GetAsyncConnection">
            <summary>
            Get asynchronous socket connection from connection pool for the server node.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AsyncNode.PutAsyncConnection(Aerospike.Client.AsyncConnection)">
            <summary>
            Put asynchronous connection back into connection pool.
            </summary>
            <param name="conn">socket connection</param>
        </member>
        <member name="M:Aerospike.Client.AsyncNode.CloseConnections">
            <summary>
            Close all asynchronous connections in the pool.
            </summary>
        </member>
        <member name="T:BCrypt.Net.SaltParseException">
            <summary>Exception for signalling parse errors. </summary>
        </member>
        <member name="M:BCrypt.Net.SaltParseException.#ctor">
            <summary>Default constructor. </summary>
        </member>
        <member name="M:BCrypt.Net.SaltParseException.#ctor(System.String)">
            <summary>Initializes a new instance of <see cref="T:BCrypt.Net.SaltParseException"/>.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BCrypt.Net.SaltParseException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of <see cref="T:BCrypt.Net.SaltParseException"/>.</summary>
            <param name="message">       The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BCrypt.Net.SaltParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of <see cref="T:BCrypt.Net.SaltParseException"/>.</summary>
            <param name="info">   The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Aerospike.Client.Language">
            <summary>
            User defined function languages.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Language.LUA">
            <summary>
            Lua embedded programming language.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Role">
            <summary>
            Role definition.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Role.UserAdmin">
            <summary>
            Manage users their roles.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Role.SysAdmin">
            <summary>
            Manage indicies, user defined functions and server configuration. 
            </summary>
        </member>
        <member name="F:Aerospike.Client.Role.Read">
            <summary>
            Allow read transactions.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Role.ReadWrite">
            <summary>
            Allow read and write transactions.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Role.ReadWriteUdf">
            <summary>
            Allow read and write transactions within user defined functions.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Role.name">
            <summary>
            Role name.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Role.privileges">
            <summary>
            List of assigned privileges.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Role.isPredefined">
            <summary>
            Is role pre-defined.
            </summary>
        </member>
        <member name="T:Aerospike.Client.ResultSet">
            <summary>
            This class manages result retrieval from queries.
            Multiple threads will retrieve results from the server nodes and put these results on the queue.
            The single user thread consumes these results from the queue.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ResultSet.#ctor(Aerospike.Client.QueryAggregateExecutor,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Initialize result set with underlying producer/consumer queue.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ResultSet.Next">
            <summary>
            Retrieve next result. Returns true if result exists and false if no more 
            results are available.
            This method will block until a result is retrieved or the query is cancelled.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ResultSet.Dispose">
            <summary>
            Close query.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ResultSet.Close">
            <summary>
            Close query.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ResultSet.Put(System.Object)">
            <summary>
            Put object on the queue.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ResultSet.Abort">
            <summary>
            Abort retrieval with end token.
            </summary>
        </member>
        <member name="P:Aerospike.Client.ResultSet.Object">
            <summary>
            Get result.
            </summary>
        </member>
        <member name="P:Aerospike.Client.ResultSet.CancelToken">
            <summary>
            Get CancellationToken associated with this query.
            </summary>
        </member>
        <member name="T:Aerospike.Client.RecordSet">
            <summary>
            This class manages record retrieval from queries.
            Multiple threads will retrieve records from the server nodes and put these records on the queue.
            The single user thread consumes these records from the queue.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordSet.#ctor(Aerospike.Client.QueryExecutor,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Initialize record set with underlying producer/consumer queue.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordSet.Next">
            <summary>
            Retrieve next record. Returns true if record exists and false if no more 
            records are available.
            This method will block until a record is retrieved or the query is cancelled.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordSet.Dispose">
            <summary>
            Close query.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordSet.Close">
            <summary>
            Close query.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordSet.Put(Aerospike.Client.KeyRecord)">
            <summary>
            Put a record on the queue.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RecordSet.Abort">
            <summary>
            Abort retrieval with end token.
            </summary>
        </member>
        <member name="P:Aerospike.Client.RecordSet.Key">
            <summary>
            Get record's unique identifier.
            </summary>
        </member>
        <member name="P:Aerospike.Client.RecordSet.Record">
            <summary>
            Get record's header and bin data.
            </summary>
        </member>
        <member name="P:Aerospike.Client.RecordSet.CancelToken">
            <summary>
            Get CancellationToken associated with this query.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Properties.Resources.aerospike">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Aerospike.Client.Properties.Resources.aslib">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Aerospike.Client.Properties.Resources.stream_ops">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Aerospike.Client.PartitionInfo">
            <summary>
            Parse node partitions using new protocol. This is more code than a String.split() implementation, 
            but it's faster because there are much fewer interim strings.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Log">
            <summary>
            Aerospike client logging facility. Logs can be filtered and message callbacks 
            can be defined to control how log messages are written.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Log.SetLevel(Aerospike.Client.Log.Level)">
            <summary>
            Set log level filter.
            </summary>
            <param name="level">only show logs at this or more urgent level</param>
        </member>
        <member name="M:Aerospike.Client.Log.SetCallback(Aerospike.Client.Log.Callback)">
            <summary>
            Set optional log callback implementation. If the callback is not defined (or null), 
            log messages will not be displayed.
            </summary>
            <param name="callback"><seealso cref="T:Aerospike.Client.Log.Callback"/> implementation</param>
        </member>
        <member name="M:Aerospike.Client.Log.WarnEnabled">
            <summary>
            Determine if warning log level is enabled.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Log.InfoEnabled">
            <summary>
            Determine if info log level is enabled.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Log.DebugEnabled">
            <summary>
            Determine if debug log level is enabled.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Log.Error(System.String)">
            <summary>
            Log an error message. 
            </summary>
            <param name="message">message string not terminated with a newline</param>
        </member>
        <member name="M:Aerospike.Client.Log.Warn(System.String)">
            <summary>
            Log a warning message. 
            </summary>
            <param name="message">message string not terminated with a newline</param>
        </member>
        <member name="M:Aerospike.Client.Log.Info(System.String)">
            <summary>
            Log an info message. 
            </summary>
            <param name="message">message string not terminated with a newline</param>
        </member>
        <member name="M:Aerospike.Client.Log.Debug(System.String)">
            <summary>
            Log an debug message. 
            </summary>
            <param name="message">message string not terminated with a newline</param>
        </member>
        <member name="M:Aerospike.Client.Log.LogMessage(Aerospike.Client.Log.Level,System.String)">
            <summary>
            Filter and forward message to callback.
            </summary>
            <param name="level">message severity level</param>
            <param name="message">message string not terminated with a newline</param>
        </member>
        <member name="T:Aerospike.Client.Log.Level">
            <summary>
            Log escalation level.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Log.Level.ERROR">
            <summary>
            Error condition has occurred.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Log.Level.WARN">
            <summary>
            Unusual non-error condition has occurred.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Log.Level.INFO">
            <summary>
            Normal information message.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Log.Level.DEBUG">
            <summary>
            Message used for debugging purposes.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Log.Callback">
            <summary>
            The log is written to the Windows Event Log by default.
            The caller can override this and set a private method which will be called 
            for each log entry.
            </summary>
            <param name="level">Log level.</param>
            <param name="msg">Log message.</param>
        </member>
        <member name="T:Aerospike.Client.WriteListener">
            <summary>
            Asynchronous result notifications for put, append, prepend, add, delete and touch commands.
            </summary>
        </member>
        <member name="M:Aerospike.Client.WriteListener.OnSuccess(Aerospike.Client.Key)">
            <summary>
            This method is called when an asynchronous write command completes successfully.
            </summary>
            <param name="key">unique record identifier</param>
        </member>
        <member name="M:Aerospike.Client.WriteListener.OnFailure(Aerospike.Client.AerospikeException)">
            <summary>
            This method is called when an asynchronous write command fails.
            </summary>
            <param name="exception">error that occurred</param>
        </member>
        <member name="T:Aerospike.Client.ExistsSequenceListener">
            <summary>
            Asynchronous result notifications for batch exists commands.
            The results are sent one record at a time.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ExistsSequenceListener.OnExists(Aerospike.Client.Key,System.Boolean)">
            <summary>
            This method is called when an asynchronous batch exists result is received from the server.
            The receive sequence is not ordered.
            </summary>
            <param name="key">unique record identifier</param>
            <param name="exists">whether key exists on server</param>
        </member>
        <member name="M:Aerospike.Client.ExistsSequenceListener.OnSuccess">
            <summary>
            This method is called when the asynchronous batch exists command completes.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ExistsSequenceListener.OnFailure(Aerospike.Client.AerospikeException)">
            <summary>
            This method is called when an asynchronous batch exists command fails.
            </summary>
            <param name="exception">error that occurred</param>
        </member>
        <member name="T:Aerospike.Client.LargeList">
            <summary>
            Create and manage a list within a single bin.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeList.#ctor(Aerospike.Client.AerospikeClient,Aerospike.Client.WritePolicy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large list operator.
            </summary>
            <param name="client">client</param>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="createModule">Lua function name that initializes list configuration parameters, pass null for default list</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Add(Aerospike.Client.Value)">
            <summary>
            Add value to list.  Fail if value's key exists and list is configured for unique keys.
            If value is a map, the key is identified by "key" entry.  Otherwise, the value is the key.
            If large list does not exist, create it using specified userModule configuration.
            </summary>
            <param name="value">value to add</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Add(Aerospike.Client.Value[])">
            <summary>
            Add values to list.  Fail if a value's key exists and list is configured for unique keys.
            If value is a map, the key is identified by "key" entry.  Otherwise, the value is the key.
            If large list does not exist, create it using specified userModule configuration.
            </summary>
            <param name="values">values to add</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Add(System.Collections.IList)">
            <summary>
            Add values to list.  Fail if a value's key exists and list is configured for unique keys.
            If value is a map, the key is identified by "key" entry.  Otherwise, the value is the key.
            If large list does not exist, create it using specified userModule configuration.
            </summary>
            <param name="values">values to add</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Update(Aerospike.Client.Value)">
            <summary>
            Update value in list if key exists.  Add value to list if key does not exist.
            If value is a map, the key is identified by "key" entry.  Otherwise, the value is the key.
            If large list does not exist, create it using specified userModule configuration.
            </summary>
            <param name="value">value to update</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Update(Aerospike.Client.Value[])">
            <summary>
            Update/Add each value in array depending if key exists or not.
            If value is a map, the key is identified by "key" entry.  Otherwise, the value is the key.
            If large list does not exist, create it using specified userModule configuration.
            </summary>
            <param name="values">values to update</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Update(System.Collections.IList)">
            <summary>
            Update/Add each value in values list depending if key exists or not.
            If value is a map, the key is identified by "key" entry.  Otherwise, the value is the key.
            If large list does not exist, create it using specified userModule configuration.
            </summary>
            <param name="values">values to update</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Remove(Aerospike.Client.Value)">
            <summary>
            Delete value from list.
            </summary>
            <param name="value">value to delete</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Remove(System.Collections.IList)">
            <summary>
            Delete values from list.
            </summary>
            <param name="values">values to delete</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Remove(Aerospike.Client.Value,Aerospike.Client.Value)">
            <summary>
            Delete values from list between range.  Return count of entries removed.
            </summary>
            <param name="begin">low value of the range (inclusive)</param>
            <param name="end">high value of the range (inclusive)</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Find(Aerospike.Client.Value)">
            <summary>
            Select values from list.
            </summary>
            <param name="value">value to select</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Range(Aerospike.Client.Value,Aerospike.Client.Value)">
            <summary>
            Select range of values from list.
            </summary>
            <param name="begin">begin value inclusive</param>
            <param name="end">end value inclusive</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.FindThenFilter(Aerospike.Client.Value,System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Select values from list and apply specified Lua filter.
            </summary>
            <param name="value">value to select</param>
            <param name="filterModule">Lua module name which contains filter function</param>
            <param name="filterName">Lua function name which applies filter to returned list</param>
            <param name="filterArgs">arguments to Lua function name</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Scan">
            <summary>
            Return all objects in the list.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeList.Filter(System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Select values from list and apply specified Lua filter.
            </summary>
            <param name="filterModule">Lua module name which contains filter function</param>
            <param name="filterName">Lua function name which applies filter to returned list</param>
            <param name="filterArgs">arguments to Lua function name</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.Destroy">
            <summary>
            Delete bin containing the list.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeList.Size">
            <summary>
            Return size of list.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeList.GetConfig">
            <summary>
            Return map of list configuration parameters.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeList.SetCapacity(System.Int32)">
            <summary>
            Set maximum number of entries in the list.
            </summary>
            <param name="capacity">max entries</param>
        </member>
        <member name="M:Aerospike.Client.LargeList.GetCapacity">
            <summary>
            Return maximum number of entries in the list.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Packer">
            <summary>
            Serialize collection objects using MessagePack format specification:
            
            https://github.com/msgpack/msgpack/blob/master/spec.md
            </summary>
        </member>
        <member name="T:Aerospike.Client.Record">
            <summary>
            Container object for records.  Records are equivalent to rows.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Record.bins">
            <summary>
            Map of requested name/value bins.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Record.generation">
            <summary>
            Record modification count.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Record.expiration">
            <summary>
            Date record will expire, in seconds from Jan 01 2010 00:00:00 GMT
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,System.Int32)">
            <summary>
            Initialize record.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetValue(System.String)">
            <summary>
            Get bin value given bin name.
            Enter empty string ("") for servers configured as single-bin.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetString(System.String)">
            <summary>
            Get bin value as string.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetDouble(System.String)">
            <summary>
            Get bin value as double.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetFloat(System.String)">
            <summary>
            Get bin value as float.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetLong(System.String)">
            <summary>
            Get bin value as long.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetULong(System.String)">
            <summary>
            Get bin value as ulong.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetInt(System.String)">
            <summary>
            Get bin value as int.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetUInt(System.String)">
            <summary>
            Get bin value as uint.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetShort(System.String)">
            <summary>
            Get bin value as short.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetUShort(System.String)">
            <summary>
            Get bin value as ushort.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetByte(System.String)">
            <summary>
            Get bin value as byte.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetSBytes(System.String)">
            <summary>
            Get bin value as sbyte.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.GetBool(System.String)">
            <summary>
            Get bin value as bool.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Record.ToString">
            <summary>
            Return string representation of record.
            </summary>
        </member>
        <member name="T:Aerospike.Client.KeyRecord">
            <summary>
            Container object for key identifier and record data.
            </summary>
        </member>
        <member name="F:Aerospike.Client.KeyRecord.key">
            <summary>
            Unique identifier for record.
            </summary>
        </member>
        <member name="F:Aerospike.Client.KeyRecord.record">
            <summary>
            Record header and bin data.
            </summary>
        </member>
        <member name="M:Aerospike.Client.KeyRecord.#ctor(Aerospike.Client.Key,Aerospike.Client.Record)">
            <summary>
            Initialize key and record.
            </summary>
        </member>
        <member name="T:Aerospike.Client.LargeStack">
            <summary>
            Create and manage a stack within a single bin. A stack is last in/first out (LIFO).
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeStack.#ctor(Aerospike.Client.AerospikeClient,Aerospike.Client.WritePolicy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large stack operator.
            </summary>
            <param name="client">client</param>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="createModule">Lua function name that initializes list configuration parameters, pass null for default set</param>
        </member>
        <member name="M:Aerospike.Client.LargeStack.Push(Aerospike.Client.Value)">
            <summary>
            Push value onto stack.  If the stack does not exist, create it using specified userModule configuration.
            </summary>
            <param name="value">value to push</param>
        </member>
        <member name="M:Aerospike.Client.LargeStack.Push(Aerospike.Client.Value[])">
            <summary>
            Push values onto stack.  If the stack does not exist, create it using specified userModule configuration.
            </summary>
            <param name="values">values to push</param>
        </member>
        <member name="M:Aerospike.Client.LargeStack.Push(System.Collections.IList)">
            <summary>
            Push values onto stack.  If the stack does not exist, create it using specified userModule configuration.
            </summary>
            <param name="values">values to push</param>
        </member>
        <member name="M:Aerospike.Client.LargeStack.Peek(System.Int32)">
            <summary>
            Select items from top of stack.
            </summary>
            <param name="peekCount">number of items to select</param>
        </member>
        <member name="M:Aerospike.Client.LargeStack.Scan">
            <summary>
            Return list of all objects on the stack.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeStack.Filter(System.Int32,System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Select items from top of stack.
            </summary>
            <param name="peekCount">number of items to select.</param>
            <param name="filterModule">Lua module name which contains filter function</param>
            <param name="filterName">Lua function name which applies filter to returned list</param>
            <param name="filterArgs">arguments to Lua function name</param>
        </member>
        <member name="M:Aerospike.Client.LargeStack.Destroy">
            <summary>
            Delete bin containing the stack.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeStack.Size">
            <summary>
            Return size of stack.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeStack.GetConfig">
            <summary>
            Return map of stack configuration parameters.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeStack.SetCapacity(System.Int32)">
            <summary>
            Set maximum number of entries for the stack.
            </summary>
            <param name="capacity">max entries</param>
        </member>
        <member name="M:Aerospike.Client.LargeStack.GetCapacity">
            <summary>
            Return maximum number of entries for the stack.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Privilege">
            <summary>
            User privilege.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Privilege.code">
            <summary>
            Privilege code.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Privilege.ns">
            <summary>
            Namespace scope. Apply permission to this namespace only.
            If namespace is null, the privilege applies to all namespaces.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Privilege.setName">
            <summary>
            Set name scope. Apply permission to this set within namespace only.
            If set is null, the privilege applies to all sets within namespace.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Privilege.CanScope">
            <summary>
            Can privilege be scoped with namespace and set.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Privilege.Clone">
            <summary>
            Return privilege shallow clone.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Privilege.Equals(System.Object)">
            <summary>
            Return if privileges are equal.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Privilege.GetHashCode">
            <summary>
            Return privilege hashcode.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Privilege.ToString">
            <summary>
            Convert privilege to string.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Privilege.PrivilegeCodeToString">
            <summary>
            Convert privilege code to string.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Privilege.Code">
            <summary>
            Privilege code property.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Privilege.CodeString">
            <summary>
            Privilege code property.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Privilege.Namespace">
            <summary>
            Namespace property.
            </summary>
        </member>
        <member name="P:Aerospike.Client.Privilege.SetName">
            <summary>
            SetName property.
            </summary>
        </member>
        <member name="T:BCrypt.Net.BCrypt">
            <summary>BCrypt implementation.</summary>
            <remarks>
             <para>
                   BCrypt implements OpenBSD-style Blowfish password hashing using the scheme described in
                   <a href="http://www.usenix.org/event/usenix99/provos/provos_html/index.html">"A Future-
                   Adaptable Password Scheme"</a> by Niels Provos and David Mazieres.
             </para>
             <para>
                   This password hashing system tries to thwart off-line password cracking using a
                   computationally-intensive hashing algorithm, based on Bruce Schneier's Blowfish cipher.
                   The work factor of the algorithm is parameterised, so it can be increased as computers
                   get faster.
             </para>
             <para>
                   Usage is really simple. To hash a password for the first time, call the <see cref="M:BCrypt.Net.BCrypt.HashPassword(System.String)"/> method with a random salt, like this:
             </para>
             <code>string pw_hash = BCrypt.HashPassword(plain_password);</code>
             <para>
                   To check whether a plaintext password matches one that has been hashed previously,
                   use the <see cref="M:BCrypt.Net.BCrypt.Verify(System.String,System.String)"/> method:
             </para>
             <code>
                if (BCrypt.Verify(candidate_password, stored_hash))
                    Console.WriteLine("It matches");
                else
                    Console.WriteLine("It does not match");
              </code>
              <para>
                    The <see cref="M:BCrypt.Net.BCrypt.GenerateSalt"/> method takes an optional parameter (workFactor) that
                    determines the computational complexity of the hashing:
              </para>
              <code>
                string strong_salt = BCrypt.GenerateSalt(10);
                string stronger_salt = BCrypt.GenerateSalt(12);
              </code>
              <para>
                    The amount of work increases exponentially (2^workFactor), so each increment is twice
                    as much work. The default workFactor is 10, and the valid range is 4 to 31.
              </para>
            </remarks>
        </member>
        <member name="M:BCrypt.Net.BCrypt.HashString(System.String)">
            <summary>
             Hash a string using the OpenBSD bcrypt scheme and a salt generated by <see cref="M:BCrypt.Net.BCrypt.GenerateSalt"/>.
            </summary>
            <remarks>Just an alias for HashPassword.</remarks>
            <param name="source">The string to hash.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.HashString(System.String,System.Int32)">
            <summary>
             Hash a string using the OpenBSD bcrypt scheme and a salt generated by <see cref="M:BCrypt.Net.BCrypt.GenerateSalt"/>.
            </summary>
            <remarks>Just an alias for HashPassword.</remarks>
            <param name="source">  The string to hash.</param>
            <param name="workFactor">The log2 of the number of rounds of hashing to apply - the work
                                     factor therefore increases as 2^workFactor.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.HashPassword(System.String)">
            <summary>
             Hash a password using the OpenBSD bcrypt scheme and a salt generated by <see cref="M:BCrypt.Net.BCrypt.GenerateSalt"/>.
            </summary>
            <param name="input">The password to hash.</param>
            <returns>The hashed password.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.HashPassword(System.String,System.Int32)">
            <summary>
             Hash a password using the OpenBSD bcrypt scheme and a salt generated by <see cref="M:BCrypt.Net.BCrypt.GenerateSalt(System.Int32)"/> using the given <paramref name="workFactor"/>.
            </summary>
            <param name="input">     The password to hash.</param>
            <param name="workFactor">The log2 of the number of rounds of hashing to apply - the work
                                     factor therefore increases as 2^workFactor.</param>
            <returns>The hashed password.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.HashPassword(System.String,System.String)">
            <summary>Hash a password using the OpenBSD bcrypt scheme.</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
                                                illegal values.</exception>
            <param name="input">The password to hash.</param>
            <param name="salt">    the salt to hash with (perhaps generated using BCrypt.gensalt).</param>
            <returns>The hashed password</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.GenerateSalt(System.Int32)">
            <summary>
             Generate a salt for use with the <see cref="M:BCrypt.Net.BCrypt.HashPassword(System.String,System.String)"/> method.
            </summary>
            <param name="workFactor">The log2 of the number of rounds of hashing to apply - the work
                                     factor therefore increases as 2**workFactor.</param>
            <returns>A base64 encoded salt value.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.GenerateSalt">
            <summary>
             Generate a salt for use with the <see cref="M:BCrypt.Net.BCrypt.HashPassword(System.String,System.String)"/> method
             selecting a reasonable default for the number of hashing rounds to apply.
            </summary>
            <returns>A base64 encoded salt value.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.Verify(System.String,System.String)">
            <summary>
             Verifies that the hash of the given <paramref name="text"/> matches the provided
             <paramref name="hash"/>
            </summary>
            <param name="text">The text to verify.</param>
            <param name="hash"> The previously-hashed password.</param>
            <returns>true if the passwords match, false otherwise.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.EncodeBase64(System.Byte[],System.Int32)">
            <summary>
             Encode a byte array using bcrypt's slightly-modified base64 encoding scheme. Note that this
             is *not* compatible with the standard MIME-base64 encoding.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
                                                illegal values.</exception>
            <param name="byteArray">The byte array to encode.</param>
            <param name="length">   The number of bytes to encode.</param>
            <returns>Base64-encoded string.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.DecodeBase64(System.String,System.Int32)">
            <summary>
             Decode a string encoded using bcrypt's base64 scheme to a byte array. Note that this is *not*
             compatible with the standard MIME-base64 encoding.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
                                                illegal values.</exception>
            <param name="encodedstring">The string to decode.</param>
            <param name="maximumBytes"> The maximum bytes to decode.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.Char64(System.Char)">
            <summary>
             Look up the 3 bits base64-encoded by the specified character, range-checking against
             conversion table.
            </summary>
            <param name="character">The base64-encoded value.</param>
            <returns>The decoded value of x.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.Encipher(System.UInt32[],System.Int32)">
            <summary>Blowfish encipher a single 64-bit block encoded as two 32-bit halves.</summary>
            <param name="blockArray">An array containing the two 32-bit half blocks.</param>
            <param name="offset">    The position in the array of the blocks.</param>
        </member>
        <member name="M:BCrypt.Net.BCrypt.StreamToWord(System.Byte[],System.Int32@)">
            <summary>Cycically extract a word of key material.</summary>
            <param name="data">The string to extract the data from.</param>
            <param name="offset"> [in,out] The current offset.</param>
            <returns>The next word of material from data.</returns>
        </member>
        <member name="M:BCrypt.Net.BCrypt.InitializeKey">
            <summary>Initializes the Blowfish key schedule.</summary>
        </member>
        <member name="M:BCrypt.Net.BCrypt.Key(System.Byte[])">
            <summary>Key the Blowfish cipher.</summary>
            <param name="keyBytes">The key byte array.</param>
        </member>
        <member name="M:BCrypt.Net.BCrypt.EKSKey(System.Byte[],System.Byte[])">
            <summary>
             Perform the "enhanced key schedule" step described by Provos and Mazieres in "A Future-
             Adaptable Password Scheme" http://www.openbsd.org/papers/bcrypt-paper.ps.
            </summary>
            <param name="saltBytes"> Salt byte array.</param>
            <param name="inputBytes">Input byte array.</param>
        </member>
        <member name="M:BCrypt.Net.BCrypt.CryptRaw(System.Byte[],System.Byte[],System.Int32)">
            <summary>Perform the central hashing step in the bcrypt scheme.</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
                                                illegal values.</exception>
            <param name="inputBytes">The input byte array to hash.</param>
            <param name="saltBytes"> The salt byte array to hash with.</param>
            <param name="logRounds"> The binary logarithm of the number of rounds of hashing to apply.</param>
            <returns>A byte array containing the hashed result.</returns>
        </member>
        <member name="T:Aerospike.Client.Priority">
            <summary>
            Priority of operations on database server.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Priority.DEFAULT">
            <summary>
            The server defines the priority.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Priority.LOW">
            <summary>
            Run the database operation in a background thread.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Priority.MEDIUM">
            <summary>
            Run the database operation at medium priority.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Priority.HIGH">
            <summary>
            Run the database operation at the highest priority.
            </summary>
        </member>
        <member name="T:Aerospike.Client.ConsistencyLevel">
            <summary>
            How replicas should be consulted in a read operation to provide the desired
            consistency guarantee.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ConsistencyLevel.CONSISTENCY_ONE">
            <summary>
            Involve a single replica in the operation.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ConsistencyLevel.CONSISTENCY_ALL">
            <summary>
            Involve all replicas in the operation.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Formatter">
            <summary>
            This class contains the default formatter used when serializing objects to bytes.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Formatter.Default">
            <summary>
            Default formatter used when serializing objects to bytes.
            The user can override this default.
            </summary>
        </member>
        <member name="T:Aerospike.Client.ResultCode">
            <summary>
            Database operation error codes.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.COMMAND_REJECTED">
            <summary>
            Asynchronous max concurrent database commands have been exceeded and therefore rejected.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.QUERY_TERMINATED">
            <summary>
            Query was terminated by user.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.SCAN_TERMINATED">
            <summary>
            Scan was terminated by user.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INVALID_NODE_ERROR">
            <summary>
            Chosen node is not currently active.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.PARSE_ERROR">
            <summary>
            Client parse error.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.SERIALIZE_ERROR">
            <summary>
            Client serialization error.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.OK">
            <summary>
            Operation was successful.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.SERVER_ERROR">
            <summary>
            Unknown server failure.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.KEY_NOT_FOUND_ERROR">
            <summary>
            On retrieving, touching or replacing a record that doesn't exist.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.GENERATION_ERROR">
            <summary>
            On modifying a record with unexpected generation.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.PARAMETER_ERROR">
            <summary>
            Bad parameter(s) were passed in database operation call.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.KEY_EXISTS_ERROR">
            <summary>
            On create-only (write unique) operations on a record that already
            exists.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.BIN_EXISTS_ERROR">
            <summary>
            On create-only (write unique) operations on a bin that already
            exists.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.CLUSTER_KEY_MISMATCH">
            <summary>
            Expected cluster ID was not received.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.SERVER_MEM_ERROR">
            <summary>
            Server has run out of memory.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.TIMEOUT">
            <summary>
            Client or server has timed out.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.NO_XDS">
            <summary>
            XDS product is not available.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.SERVER_NOT_AVAILABLE">
            <summary>
            Server is not accepting requests.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.BIN_TYPE_ERROR">
            <summary>
            Operation is not supported with configured bin type (single-bin or
            multi-bin).
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.RECORD_TOO_BIG">
            <summary>
            Record size exceeds limit.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.KEY_BUSY">
            <summary>
            Too many concurrent operations on the same record.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.SCAN_ABORT">
            <summary>
            Scan aborted by server.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.UNSUPPORTED_FEATURE">
            <summary>
            Client operation not supported on connected server.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.BIN_NOT_FOUND">
            <summary>
            Specified bin name does not exist in record.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.DEVICE_OVERLOAD">
            <summary>
            Specified bin name does not exist in record.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.KEY_MISMATCH">
            <summary>
            Key type mismatch.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INVALID_NAMESPACE">
            <summary>
            Invalid namespace.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.BIN_NAME_TOO_LONG">
            <summary>
            Bin name length greater than 14 characters.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.FAIL_FORBIDDEN">
            <summary>
            Operation not allowed at this time.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.QUERY_END">
            <summary>
            There are no more records left for query.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.SECURITY_NOT_SUPPORTED">
            <summary>
            Security functionality not supported by connected server.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.SECURITY_NOT_ENABLED">
            <summary>
            Security functionality supported, but not enabled by connected server.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.SECURITY_SCHEME_NOT_SUPPORTED">
            <summary>
            Security configuration not supported.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INVALID_COMMAND">
            <summary>
            Administration command is invalid.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INVALID_FIELD">
            <summary>
            Administration field is invalid.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.ILLEGAL_STATE">
            <summary>
            Server is in illegal stage.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INVALID_USER">
            <summary>
            User name is invalid.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.USER_ALREADY_EXISTS">
            <summary>
            User was previously created.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INVALID_PASSWORD">
            <summary>
            Password is invalid.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.EXPIRED_PASSWORD">
            <summary>
            Password has expired.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.FORBIDDEN_PASSWORD">
            <summary>
            Forbidden password (e.g. recently used)
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INVALID_CREDENTIAL">
            <summary>
            Security credential is invalid.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INVALID_ROLE">
            <summary>
            Role name is invalid.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.ROLE_ALREADY_EXISTS">
            <summary>
            Role already exists.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INVALID_PRIVILEGE">
            <summary>
            Specified Privilege is not valid.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.NOT_AUTHENTICATED">
            <summary>
            User must be authentication before performing database operations.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.ROLE_VIOLATION">
            <summary>
            User does not posses the required role to perform the database operation.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.UDF_BAD_RESPONSE">
            <summary>
            A user defined function returned an error code.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.LARGE_ITEM_NOT_FOUND">
            <summary>
            The requested item in a large collection was not found.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INDEX_FOUND">
            <summary>
            Secondary index already exists.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INDEX_NOTFOUND">
            <summary>
            Requested secondary index does not exist.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INDEX_OOM">
            <summary>
            Secondary index memory space exceeded.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INDEX_NOTREADABLE">
            <summary>
            Secondary index not available.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INDEX_GENERIC">
            <summary>
            Generic secondary index error.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INDEX_NAME_MAXLEN">
            <summary>
            Index name maximum length exceeded.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.INDEX_MAXCOUNT">
            <summary>
            Maximum number of indicies exceeded.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.QUERY_ABORTED">
            <summary>
            Secondary index query aborted.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.QUERY_QUEUEFULL">
            <summary>
            Secondary index queue full.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.QUERY_TIMEOUT">
            <summary>
            Secondary index query timed out on server.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ResultCode.QUERY_GENERIC">
            <summary>
            Generic query error.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ResultCode.KeepConnection(System.Int32)">
            <summary>
            Should connection be put back into pool.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ResultCode.GetResultString(System.Int32)">
            <summary>
            Return result code as a string.
            </summary>
        </member>
        <member name="T:Aerospike.Client.InfoPolicy">
            <summary>
            Policy attributes used for info commands.
            </summary>
        </member>
        <member name="F:Aerospike.Client.InfoPolicy.timeout">
            <summary>
            Info command socket timeout in milliseconds.
            Default is one second timeout.
            </summary>
        </member>
        <member name="T:Aerospike.Client.LargeMap">
            <summary>
            Create and manage a map within a single bin.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeMap.#ctor(Aerospike.Client.AerospikeClient,Aerospike.Client.WritePolicy,Aerospike.Client.Key,System.String,System.String)">
            <summary>
            Initialize large map operator.
            </summary>
            <param name="client">client</param>
            <param name="policy">generic configuration parameters, pass in null for defaults</param>
            <param name="key">unique record identifier</param>
            <param name="binName">bin name</param>
            <param name="createModule">Lua function name that initializes list configuration parameters, pass null for default set</param>
        </member>
        <member name="M:Aerospike.Client.LargeMap.Put(Aerospike.Client.Value,Aerospike.Client.Value)">
            <summary>
            Add entry to map.  If the map does not exist, create it using specified userModule configuration.
            </summary>
            <param name="name">entry key</param>
            <param name="value">entry value</param>
        </member>
        <member name="M:Aerospike.Client.LargeMap.Put(System.Collections.IDictionary)">
            <summary>
            Add map values to map.  If the map does not exist, create it using specified userModule configuration.
            </summary>
            <param name="map">map values to push</param>
        </member>
        <member name="M:Aerospike.Client.LargeMap.Get(Aerospike.Client.Value)">
            <summary>
            Get value from map given name key.
            </summary>
            <param name="name">key</param>
        </member>
        <member name="M:Aerospike.Client.LargeMap.Exists(Aerospike.Client.Value)">
            <summary>
            Check existence of key in the map.
            </summary>
            <param name="keyValue">key to check</param>
        </member>
        <member name="M:Aerospike.Client.LargeMap.Scan">
            <summary>
            Return all objects in the map.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeMap.Filter(System.String,System.String,Aerospike.Client.Value[])">
            <summary>
            Select items from map.
            </summary>
            <param name="filterModule">Lua module name which contains filter function</param>
            <param name="filterName">Lua function name which applies filter to returned list</param>
            <param name="filterArgs">arguments to Lua function name</param>
        </member>
        <member name="M:Aerospike.Client.LargeMap.Remove(Aerospike.Client.Value)">
            <summary>
            Remove entry from map.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeMap.Destroy">
            <summary>
            Delete bin containing the map.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeMap.Size">
            <summary>
            Return size of map.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeMap.GetConfig">
            <summary>
            Return map configuration parameters.
            </summary>
        </member>
        <member name="M:Aerospike.Client.LargeMap.SetCapacity(System.Int32)">
            <summary>
            Set maximum number of entries for the map.
            </summary>
            <param name="capacity">max entries</param>
        </member>
        <member name="M:Aerospike.Client.LargeMap.GetCapacity">
            <summary>
            Return maximum number of entries for the map.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BatchCommandGet.ParseRecordResults(System.Int32)">
            <summary>
            Parse all results in the batch.  Add records to shared list.
            If the record was not found, the bins will be null.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BatchCommandGet.ParseRecord(System.Int32,System.Int32,System.Int32)">
            <summary>
            Parses the given byte buffer and populate the result object.
            Returns the number of bytes that were parsed from the given buffer.
            </summary>
        </member>
        <member name="T:Aerospike.Client.LuaConfig">
            <summary>
            Lua static configuration variables. These variables apply to all AerospikeClient instances
            in a single process.
            </summary>
        </member>
        <member name="F:Aerospike.Client.LuaConfig.PackagePath">
            <summary>
            Directory location which contains user defined Lua source files.
            </summary>
        </member>
        <member name="F:Aerospike.Client.LuaConfig.InstancePoolSize">
            <summary>
            Maximum number of Lua runtime instances to cache at any point in time.
            Each query with an aggregation function requires a Lua instance.
            If the number of concurrent queries exceeds the Lua pool size, a new Lua 
            instance will still be created, but it will not be returned to the pool. 
            </summary>
        </member>
        <member name="M:Aerospike.Client.BatchCommandNodeExists.ParseRecordResults(System.Int32)">
            <summary>
            Parse all results in the batch.  Add records to shared list.
            If the record was not found, the bins will be null.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Util.ObjectToString(System.Text.StringBuilder,System.Object)">
            <summary>
            String conversion for objects containing List, Dictionary and array.
            </summary>
        </member>
        <member name="T:Aerospike.Client.ExecuteTask">
            <summary>
            Task used to poll for long running execute job completion.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ExecuteTask.#ctor(Aerospike.Client.Cluster,Aerospike.Client.Statement)">
            <summary>
            Initialize task with fields needed to query server nodes.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ExecuteTask.QueryIfDone">
            <summary>
            Query all nodes for task completion status.
            </summary>
        </member>
        <member name="T:Aerospike.Client.CommitLevel">
            <summary>
            Desired consistency guarantee when committing a transaction on the server.
            </summary>
        </member>
        <member name="F:Aerospike.Client.CommitLevel.COMMIT_ALL">
            <summary>
            Server should wait until successfully committing master and all replicas.
            </summary>
        </member>
        <member name="F:Aerospike.Client.CommitLevel.COMMIT_MASTER">
            <summary>
            Server should wait until successfully committing master only.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Info">
            <summary>
            Access server's info monitoring protocol.
            <para>
            The info protocol is a name/value pair based system, where an individual
            database server node is queried to determine its configuration and status.
            The list of supported names can be found at:
            </para>
            <para>
            <a href="https://docs.aerospike.com/display/AS2/Config+Parameters+Reference">https://docs.aerospike.com/display/AS2/Config+Parameters+Reference</a>
            </para>
            </summary>
        </member>
        <member name="M:Aerospike.Client.Info.#ctor(Aerospike.Client.Connection,System.String)">
            <summary>
            Send single command to server and store results.
            This constructor is used internally.
            The static request methods should be used instead.
            </summary>
            <param name="conn">connection to server node</param>
            <param name="command">command sent to server</param>
        </member>
        <member name="M:Aerospike.Client.Info.#ctor(Aerospike.Client.Connection,System.String[])">
            <summary>
            Send multiple commands to server and store results. 
            This constructor is used internally.
            The static request methods should be used instead.
            </summary>
            <param name="conn">connection to server node</param>
            <param name="commands">commands sent to server</param>
        </member>
        <member name="M:Aerospike.Client.Info.#ctor(Aerospike.Client.Connection)">
            <summary>
            Send default empty command to server and store results. 
            This constructor is used internally.
            The static request methods should be used instead.
            </summary>
            <param name="conn">connection to server node</param>
        </member>
        <member name="M:Aerospike.Client.Info.GetNameValueParser">
            <summary>
            Parse response in name/value pair format:
            <para>
            &lt;command&gt;\t&lt;name1&gt;=&lt;value1&gt;;&lt;name2&gt;=&lt;value2&gt;;...\n
            </para>
            </summary>
        </member>
        <member name="M:Aerospike.Client.Info.GetValue">
            <summary>
            Return single value from response buffer.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Info.Request(Aerospike.Client.Node,System.String)">
            <summary>
            Get one info value by name from the specified database server node.
            This method supports user authentication.
            </summary>
            <param name="node">server node</param>
            <param name="name">name of variable to retrieve</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(Aerospike.Client.InfoPolicy,Aerospike.Client.Node,System.String)">
            <summary>
            Get one info value by name from the specified database server node.
            This method supports user authentication.
            </summary>
            <param name="policy">info command configuration parameters, pass in null for defaults</param>
            <param name="node">server node</param>
            <param name="name">name of variable to retrieve</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(Aerospike.Client.InfoPolicy,Aerospike.Client.Node,System.String[])">
            <summary>
            Get many info values by name from the specified database server node.
            This method supports user authentication.
            </summary>
            <param name="policy">info command configuration parameters, pass in null for defaults</param>
            <param name="node">server node</param>
            <param name="names">names of variables to retrieve</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(Aerospike.Client.InfoPolicy,Aerospike.Client.Node)">
            <summary>
            Get default info values from the specified database server node.
            This method supports user authentication.
            </summary>
            <param name="policy">info command configuration parameters, pass in null for defaults</param>
            <param name="node">server node</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(System.String,System.Int32,System.String)">
            <summary>
            Get one info value by name from the specified database server node, using
            host name and port.
            This method does not support user authentication.
            </summary>
            <param name="hostname">host name</param>
            <param name="port">host port</param>
            <param name="name">name of value to retrieve</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(System.String,System.Int32,System.String[])">
            <summary>
            Get many info values by name from the specified database server node,
            using host name and port.
            This method does not support user authentication.
            </summary>
            <param name="hostname">host name</param>
            <param name="port">host port</param>
            <param name="names">names of values to retrieve</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(System.String,System.Int32)">
            <summary>
            Get default info from the specified database server node, using host name and port.
            This method does not support user authentication.
            </summary>
            <param name="hostname">host name</param>
            <param name="port">host port</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(System.Net.IPEndPoint,System.String)">
            <summary>
            Get one info value by name from the specified database server node.
            This method does not support user authentication.
            </summary>
            <param name="socketAddress">InetSocketAddress of server node</param>
            <param name="name">name of value to retrieve</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(System.Net.IPEndPoint,System.String[])">
            <summary>
            Get many info values by name from the specified database server node.
            This method does not support user authentication.
            </summary>
            <param name="socketAddress">InetSocketAddress of server node</param>
            <param name="names">names of values to retrieve</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(System.Net.IPEndPoint)">
            <summary>
            Get all the default info from the specified database server node.
            This method does not support user authentication.
            </summary>
            <param name="socketAddress">InetSocketAddress of server node</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(Aerospike.Client.Connection,System.String)">
            <summary>
            Get one info value by name from the specified database server node.
            </summary>
            <param name="conn">socket connection to server node</param>
            <param name="name">name of value to retrieve</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(Aerospike.Client.Connection,System.String[])">
            <summary>
            Get many info values by name from the specified database server node.
            </summary>
            <param name="conn">socket connection to server node</param>
            <param name="names">names of values to retrieve</param>
        </member>
        <member name="M:Aerospike.Client.Info.Request(Aerospike.Client.Connection)">
            <summary>
            Get all the default info from the specified database server node.
            </summary>
            <param name="conn">socket connection to server node</param>
        </member>
        <member name="M:Aerospike.Client.Info.GetBuffer">
            <summary>
            Get response buffer. For internal use only.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Info.GetLength">
            <summary>
            Get response length. For internal use only.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Info.SendCommand(Aerospike.Client.Connection)">
            <summary>
            Issue request and set results buffer. This method is used internally.
            The static request methods should be used instead.
            </summary>
            <param name="conn">socket connection to server node</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if socket send or receive fails</exception>
        </member>
        <member name="T:Aerospike.Client.Info.NameValueParser">
            <summary>
            Parser for responses in name/value pair format:
            <para>
            &lt;command&gt;\t&lt;name1&gt;=&lt;value1&gt;;&lt;name2&gt;=&lt;value2&gt;;...\n
            </para>
            </summary>
        </member>
        <member name="M:Aerospike.Client.Info.NameValueParser.Next">
            <summary>
            Set pointers to next name/value pair.
            Return true if next name/value pair exists.
            Return false if at end.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Info.NameValueParser.GetName">
            <summary>
            Get name.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Info.NameValueParser.GetValue">
            <summary>
            Get value.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Info.NameValueParser.GetStringBase64">
            <summary>
            Get Base64 string value.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BufferPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct near contiguous cached buffers that will be pinned 
            (like by asynchronous socket commands).
            Since the buffers are closely located and long lived,
            memory fragmentation will be greatly reduced.
            </summary>
        </member>
        <member name="T:Aerospike.Client.RegisterTask">
            <summary>
            Task used to poll for UDF registration completion.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RegisterTask.#ctor(Aerospike.Client.Cluster,System.String)">
            <summary>
            Initialize task with fields needed to query server nodes.
            </summary>
        </member>
        <member name="M:Aerospike.Client.RegisterTask.QueryIfDone">
            <summary>
            Query all nodes for task completion status.
            </summary>
        </member>
        <member name="T:Aerospike.Client.RecordExistsAction">
            <summary>
            How to handle writes when the record already exists.
            </summary>
        </member>
        <member name="F:Aerospike.Client.RecordExistsAction.UPDATE">
            <summary>
            Create or update record.
            Merge write command bins with existing bins.
            </summary>
        </member>
        <member name="F:Aerospike.Client.RecordExistsAction.UPDATE_ONLY">
            <summary>
            Update record only. Fail if record does not exist.
            Merge write command bins with existing bins.
            </summary>
        </member>
        <member name="F:Aerospike.Client.RecordExistsAction.REPLACE">
            <summary>
            Create or update record.
            Delete existing bins not referenced by write command bins.
            Supported by Aerospike 2 server versions >= 2.7.5 and 
            Aerospike 3 server versions >= 3.1.6.
            </summary>
        </member>
        <member name="F:Aerospike.Client.RecordExistsAction.REPLACE_ONLY">
            <summary>
            Update record only. Fail if record does not exist.
            Delete existing bins not referenced by write command bins.
            Supported by Aerospike 2 server versions >= 2.7.5 and 
            Aerospike 3 server versions >= 3.1.6.
            </summary>
        </member>
        <member name="F:Aerospike.Client.RecordExistsAction.CREATE_ONLY">
            <summary>
            Create only.  Fail if record exists. 
            </summary>
        </member>
        <member name="T:Aerospike.Client.AdminPolicy">
            <summary>
            Policy attributes used for user administration commands.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AdminPolicy.timeout">
            <summary>
            User administration command socket timeout in milliseconds.
            Default is one second timeout.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.EstimateSizeUtf8(System.String)">
            <summary>
            Estimate size of Utf8 encoded bytes without performing the actual encoding. 
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.StringToUtf8(System.String)">
            <summary>
            Convert input string to UTF-8 and return corresponding byte array.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.StringToUtf8(System.String,System.Byte[],System.Int32)">
            <summary>
            Convert input string to UTF-8, copies into buffer (at given offset).
            Returns number of bytes in the string.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.Utf8ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert UTF8 byte array into a string.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.Utf8DigitsToInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert UTF8 numeric digits to an unsigned integer.  Negative integers are not supported.
            <para>
            Input format: 1234
            </para>
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.LongToBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Convert ulong to big endian 64 bits.
            The bit pattern will be the same regardless of sign.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.LongToLittleBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Convert long to little endian 64 bits.
            The bit pattern will be the same regardless of sign.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.BytesToLong(System.Byte[],System.Int32)">
            <summary>
            Convert big endian signed 64 bits to long.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.LittleBytesToLong(System.Byte[],System.Int32)">
            <summary>
            Convert little endian signed 64 bits to long.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.IntToBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Convert int to big endian 32 bits.
            The bit pattern will be the same regardless of sign.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.IntToLittleBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Convert int to little endian 32 bits.
            The bit pattern will be the same regardless of sign.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.BytesToInt(System.Byte[],System.Int32)">
            <summary>
            Convert big endian signed 32 bits to int.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.LittleBytesToInt(System.Byte[],System.Int32)">
            <summary>
            Convert little endian signed 32 bits to int.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.BytesToUInt(System.Byte[],System.Int32)">
            <summary>
            Convert big endian unsigned 32 bits to uint.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.ShortToBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Convert int to big endian 16 bits.
            The bit pattern will be the same regardless of sign.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.ShortToLittleBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Convert int to little endian 16 bits.
            The bit pattern will be the same regardless of sign.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.BytesToShort(System.Byte[],System.Int32)">
            <summary>
            Convert big endian unsigned 16 bits to int.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.LittleBytesToShort(System.Byte[],System.Int32)">
            <summary>
            Convert little endian unsigned 16 bits to int.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.IntToVarBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Encode an integer in variable 7-bit format.
            The high bit indicates if more bytes are used.
            Return byte size of integer. 
            </summary>
        </member>
        <member name="M:Aerospike.Client.ByteUtil.VarBytesToInt(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Decode an integer in variable 7-bit format.
            The high bit indicates if more bytes are used.
            Return value and byte size in array.
            </summary>
        </member>
        <member name="T:Aerospike.Client.ScanCallback">
            <summary>
            This method will be called for each record returned from a scan. The user may throw a 
            <seealso cref="T:Aerospike.Client.AerospikeException.ScanTerminated"/> 
            exception if the scan should be aborted.  If any exception is thrown, parallel scan threads
            to other nodes will also be terminated and the exception will be propagated back through the
            initiating scan call.
            <para>
            Multiple threads will likely be calling scanCallback in parallel.  Therefore, your scanCallback
            implementation should be thread safe.
            </para>
            </summary>
            <param name="key">unique record identifier</param>
            <param name="record">container for bins and record meta-data</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if error occurs or scan should be terminated.</exception>
        </member>
        <member name="T:Aerospike.Client.ClientPolicy">
            <summary>
            Client initialization arguments.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.user">
            <summary>
            User authentication to cluster.  Leave null for clusters running without restricted access.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.password">
            <summary>
            Password authentication to cluster.  The password will be stored by the client and sent to server
            in hashed format.  Leave null for clusters running without restricted access.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.timeout">
            <summary>
            Initial host connection timeout in milliseconds.  The timeout when opening a connection 
            to the server host for the first time.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.maxThreads">
            <summary>
            Estimate of incoming threads concurrently using synchronous methods in the client instance.
            This field is used to size the synchronous connection pool for each server node.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.maxSocketIdle">
            <summary>
            Maximum socket idle in seconds.  Socket connection pools will discard sockets
            that have been idle longer than the maximum.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.tendInterval">
            <summary>
            Interval in milliseconds between cluster tends by maintenance thread.  Default: 1 second
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.failIfNotConnected">
            <summary>
            Throw exception if host connection fails during addHost().
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.readPolicyDefault">
            <summary>
            Default read policy that is used when read command's policy is null.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.writePolicyDefault">
            <summary>
            Default write policy that is used when write command's policy is null.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.scanPolicyDefault">
            <summary>
            Default scan policy that is used when scan command's policy is null.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.queryPolicyDefault">
            <summary>
            Default query policy that is used when query command's policy is null.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.batchPolicyDefault">
            <summary>
            Default batch policy that is used when batch command's policy is null.
            </summary>
        </member>
        <member name="F:Aerospike.Client.ClientPolicy.ipMap">
            <summary>
            A IP translation table is used in cases where different clients use different server 
            IP addresses.  This may be necessary when using clients from both inside and outside 
            a local area network.  Default is no translation.
            
            The key is the IP address returned from friend info requests to other servers.  The 
            value is the real IP address used to connect to the server.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Key">
            <summary>
            Unique record identifier. Records can be identified using a specified namespace,
            an optional set name, and a user defined key which must be unique within a set.
            Records can also be identified by namespace/digest which is the combination used 
            on the server.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Key.ns">
            <summary>
            Namespace. Equivalent to database name.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Key.setName">
            <summary>
            Optional set name. Equivalent to database table.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Key.digest">
            <summary>
            Unique server hash value generated from set name and user key.
            </summary>
        </member>
        <member name="F:Aerospike.Client.Key.userKey">
            <summary>
            Original user key. This key is immediately converted to a hash digest.
            This key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,Aerospike.Client.Value)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <param name="offset">byte array segment offset</param>
            <param name="length">byte array segment length</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.UInt64)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.Int16)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.UInt16)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.Byte)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.String,System.SByte)">
            <summary>
            Initialize key from namespace, optional set name and user key.
            The set name and user defined key are converted to a digest before sending to the server.
            The user key is not used or returned by the server by default. If the user key needs 
            to persist on the server, use one of the following methods: 
            <list type="bullet">
            <item>Set "WritePolicy.sendKey" to true. In this case, the key will be sent to the server for storage on writes
            and retrieved on multi-record scans and queries.</item>
            <item>Explicitly store and retrieve the key in a bin.</item>
            </list>
            </summary>
            <param name="ns">namespace</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">user defined unique identifier within set.</param>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="M:Aerospike.Client.Key.#ctor(System.String,System.Byte[],System.String,Aerospike.Client.Value)">
            <summary>
            Initialize key from namespace, digest, optional set name and optional userKey.
            </summary>
            <param name="ns">namespace</param>
            <param name="digest">unique server hash value</param>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="userKey">optional original user key (not hash digest)</param>
        </member>
        <member name="M:Aerospike.Client.Key.GetHashCode">
            <summary>
            Hash lookup uses namespace and digest.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Key.Equals(System.Object)">
            <summary>
            Equality uses namespace and digest.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Key.ToString">
            <summary>
            Return key elements in string format.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Key.ComputeDigest(System.String,Aerospike.Client.Value)">
            <summary>
            Generate unique server hash value from set name, key type and user defined key.  
            The hash function is RIPEMD-160 (a 160 bit hash).
            </summary>
            <param name="setName">optional set name, enter null when set does not exist</param>
            <param name="key">record identifier, unique within set</param>
            <returns>unique server hash value</returns>
            <exception cref="T:Aerospike.Client.AerospikeException">if digest computation fails</exception>
        </member>
        <member name="T:Aerospike.Client.AsyncConnection">
            <summary>
            Asynchronous socket channel connection wrapper.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AsyncConnection.IsValid">
            <summary>
            Is socket connected and used within specified limits.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AsyncConnection.Close">
            <summary>
            Shutdown and close socket.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeException">
            <summary>
            Aerospike exceptions that can be thrown from the client.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.KeepConnection">
            <summary>
            Should connection be put back into pool.
            </summary>
        </member>
        <member name="P:Aerospike.Client.AerospikeException.Message">
            <summary>
            Return error message string.
            </summary>
        </member>
        <member name="P:Aerospike.Client.AerospikeException.Result">
            <summary>
            Get integer result code.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeException.Timeout">
            <summary>
            Exception thrown when database request expires before completing.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AerospikeException.Timeout.timeout">
            <summary>
            Specified timeout in milliseconds.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AerospikeException.Timeout.iterations">
            <summary>
            Number of attempts before failing.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AerospikeException.Timeout.failedNodes">
            <summary>
            Number of times when no nodes could be accessed.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AerospikeException.Timeout.failedConns">
            <summary>
            Number of times a connection could not be retrieved from a connection pool.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.Timeout.#ctor">
            <summary>
            Create timeout exception.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.Timeout.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create timeout exception with statistics.
            </summary>
        </member>
        <member name="P:Aerospike.Client.AerospikeException.Timeout.Message">
            <summary>
            Get timeout message with statistics.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeException.Serialize">
            <summary>
            Exception thrown when Java serialization error occurs.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.Serialize.#ctor(System.Exception)">
            <summary>
            Create serialize exception.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.Serialize.#ctor(System.String)">
            <summary>
            Create serialize exception with additional string message.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeException.Parse">
            <summary>
            Exception thrown when client can't parse data returned from server.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.Parse.#ctor(System.String)">
            <summary>
            Create parse exception.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeException.Connection">
            <summary>
            Exception thrown when client can't connect to the server.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.Connection.#ctor(System.String)">
            <summary>
            Create connection exception with string message.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.Connection.#ctor(System.Exception)">
            <summary>
            Create connection exception with underlying exception.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeException.InvalidNode">
            <summary>
            Exception thrown when chosen node is not active.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.InvalidNode.#ctor">
            <summary>
            Create invalid node exception.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeException.ScanTerminated">
            <summary>
            Exception thrown when scan was terminated prematurely.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.ScanTerminated.#ctor">
            <summary>
            Create scan terminated exception.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.ScanTerminated.#ctor(System.Exception)">
            <summary>
            Create scan terminated exception with underlying exception.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeException.QueryTerminated">
            <summary>
            Exception thrown when query was terminated prematurely.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.QueryTerminated.#ctor">
            <summary>
            Create query terminated exception.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.QueryTerminated.#ctor(System.Exception)">
            <summary>
            Create query terminated exception with underlying exception.
            </summary>
        </member>
        <member name="T:Aerospike.Client.AerospikeException.CommandRejected">
            <summary>
            Exception thrown when asynchronous command was rejected because the 
            max concurrent database commands have been exceeded.
            </summary>
        </member>
        <member name="M:Aerospike.Client.AerospikeException.CommandRejected.#ctor">
            <summary>
            Create command rejected exception.
            </summary>
        </member>
        <member name="M:Aerospike.Client.ExecutorThread.Stop">
            <summary>
            Send stop signal to each thread.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BatchCommandNodeGet.ParseRecordResults(System.Int32)">
            <summary>
            Parse all results in the batch.  Add records to shared list.
            If the record was not found, the bins will be null.
            </summary>
        </member>
        <member name="M:Aerospike.Client.BatchCommandNodeGet.ParseRecord(System.Int32,System.Int32,System.Int32)">
            <summary>
            Parses the given byte buffer and populate the result object.
            Returns the number of bytes that were parsed from the given buffer.
            </summary>
        </member>
        <member name="T:Aerospike.Client.PrivilegeCode">
            <summary>
            Permission codes define the type of permission granted for a user's role.
            </summary>
        </member>
        <member name="F:Aerospike.Client.PrivilegeCode.USER_ADMIN">
            <summary>
            User can edit/remove other users.  Global scope only.
            </summary>
        </member>
        <member name="F:Aerospike.Client.PrivilegeCode.SYS_ADMIN">
            <summary>
            User can perform systems administration functions on a database that do not involve user
            administration.  Global scope only.
            </summary>
        </member>
        <member name="F:Aerospike.Client.PrivilegeCode.READ">
            <summary>
            User can read data only.
            </summary>
        </member>
        <member name="F:Aerospike.Client.PrivilegeCode.READ_WRITE">
            <summary>
            User can read and write data.
            </summary>
        </member>
        <member name="F:Aerospike.Client.PrivilegeCode.READ_WRITE_UDF">
            <summary>
            User can read and write data through user defined functions.
            </summary>
        </member>
        <member name="T:Aerospike.Client.Join">
            <summary>
            Client-side join definition. The left record must contain a bin with a 
            list of keys.  That list will be used to retreive other records in the
            given namespace and set.
            </summary>
        </member>
        <member name="M:Aerospike.Client.Join.#ctor(System.String,System.String,System.String)">
            <summary>
            Create join definition to read all joined bins.
            </summary>
            <param name="leftKeysBinName">bin name of key list located in left record</param>
            <param name="rightNamespace">namespace of joined record(s)</param>
            <param name="rightSetName">set name of joined record(s)</param>
        </member>
        <member name="M:Aerospike.Client.Join.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Create join definition to read specified joined bins.
            </summary>
            <param name="leftKeysBinName">bin name of key list located in main record</param>
            <param name="rightNamespace">namespace of joined record(s)</param>
            <param name="rightSetName">set name of joined record(s)</param>
            <param name="rightBinNames">bin names to retrieved in joined record(s)</param>
        </member>
        <member name="T:Aerospike.Client.AsyncClientPolicy">
            <summary>
            Container object for client policy Command.
            </summary>
        </member>
        <member name="F:Aerospike.Client.AsyncClientPolicy.asyncMaxCommandAction">
            <summary>
            How to handle cases when the asynchronous maximum number of concurrent connections 
            have been reached.  
            </summary>
        </member>
        <member name="F:Aerospike.Client.AsyncClientPolicy.asyncMaxCommands">
            <summary>
            Maximum number of concurrent asynchronous commands that are active at any point in time.
            Concurrent commands can be used to estimate concurrent connections.
            The number of concurrent open connections is limited by:
            <para>
            max open connections = asyncMaxCommands * &lt;number of nodes in cluster&gt;
            </para>
            The actual number of open connections consumed depends on how balanced the commands are 
            between nodes and if asyncMaxConnAction is ACCEPT.
            <para>
            The maximum open connections should not exceed the total socket file descriptors available
            on the client machine.  The socket file descriptors available can be determined by the
            following command:
            </para>
            <para>
            ulimit -n
            </para>
            </summary>
        </member>
    </members>
</doc>
